<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>人工智能科普</title>
    <link href="/2022/03/13/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%A7%91%E6%99%AE/"/>
    <url>/2022/03/13/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%A7%91%E6%99%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="人工智能科普（一）"><a href="#人工智能科普（一）" class="headerlink" title="人工智能科普（一）"></a>人工智能科普（一）</h1><p>视频链接：<a href="https://www.ixigua.com/7009235244809191966?id=6937289753200951844&amp;logTag=12816ac387dcdfdf3afd">https://www.ixigua.com/7009235244809191966?id=6937289753200951844&amp;logTag=12816ac387dcdfdf3afd</a></p><h2 id="一、人工智能发展史"><a href="#一、人工智能发展史" class="headerlink" title="一、人工智能发展史"></a>一、人工智能发展史</h2><p>1、1950年，英国，图灵。提出了图灵测试方法</p><p>2、1956年。马文明斯基、约翰麦卡锡、香农召开了 达特茅斯会议，发明了人工智能（artificial intelligence）</p><p>3、1997年，IBM深蓝计算机，下象棋战胜了冠军</p><p>辛顿 反向传播算法（BP）、纽约大学杨力昆 卷机神经网络（CNN）、加拿大本吉奥。</p><p>反向传播算法（BP）：先调第n隐层，。。。最后调第一隐层。算法复杂度低。</p><p>功能：实时翻译、文章翻译</p><h2 id="二、梯度下降算法"><a href="#二、梯度下降算法" class="headerlink" title="二、梯度下降算法"></a>二、梯度下降算法</h2><p>ai最核心的算法，可以处理分类问题和回归问题。</p><p>误差综合最小：损失函数</p><p>梯度下降算法用来优化参数，如果参数很多的话，最小二乘法太过于复杂，所以又了梯度下降算法。</p><p>优化参数w的方法：将w作为横坐标，损失函数作为纵坐标。我们想找到一个w使损失函数最小，这时候就需要用到梯度下降算法。首先求一个函数，偏 j 比偏 w （偏导数），进行迭代。可以找到一个更好的w2，继续迭代找w3。。。一步一步，一次次计算，就能找到最好的w。偏导数约等于0时，就找到了最优解。</p><h2 id="三、神经网络"><a href="#三、神经网络" class="headerlink" title="三、神经网络"></a>三、神经网络</h2><p>M–P模型：每一个神经元，都是多输入，单输出。</p><p>激活函数：sigmoid函数。接近零，不像下游输出，接近一，向下游输出。</p><p>神经网络怎么识别图像？图像在计算机看来其实就是一堆数，通过训练，找到一大堆参数，判断这一堆数是不是代表X。</p><h2 id="四、人工智能的框架"><a href="#四、人工智能的框架" class="headerlink" title="四、人工智能的框架"></a>四、人工智能的框架</h2><p>1、谷歌的TensoFlow</p><p>2、脸书的Pytorch</p><p>3、华为的MindSpore</p><p>​    自动并行计算；二阶优化，加速寻找最低点；全方位协同，手机 汽车都能用，不需要传到云计算中心再返回；信息安全性高，数据脱敏</p><hr><h2 id="五、计算机识别图像，CNN"><a href="#五、计算机识别图像，CNN" class="headerlink" title="五、计算机识别图像，CNN"></a>五、计算机识别图像，CNN</h2><p>杨立昆，CNN</p><h4 id="步骤一、卷积："><a href="#步骤一、卷积：" class="headerlink" title="步骤一、卷积："></a>步骤一、卷积：</h4><p> 用数学方法提取图像特征。</p><p>提取特征：用卷积核对图像做卷积运算。</p><p>卷积核：也是一个矩阵，3<em>3/5</em>5</p><p>卷积运算：把卷积核放到图像上，对应元素相乘再相加，再把结果放到正中心点，图像所有地方都走遍，就构成特征图。</p><p>特征图上数字越大，说明越满足特征。</p><h4 id="步骤二、池化，激活"><a href="#步骤二、池化，激活" class="headerlink" title="步骤二、池化，激活"></a>步骤二、池化，激活</h4><p>池化：把特征图中有特征的放大，没特征的忽略</p><p>激活：sigmoid函数</p><p>卷积核会自动调整，就像训练参数。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>人工智能</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>知识储备.md</title>
    <link href="/2022/03/11/%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87/"/>
    <url>/2022/03/11/%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87/</url>
    
    <content type="html"><![CDATA[<h3 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h3><p>传统的javaweb开发方式中，无论是采用jsp+servelt或者是采用Spring框架。都有一个问题，就是怎么把后端的数据，添加到前端页面中，并渲染到DOM中显示给用户。前端写好静态页面，再由后端人员把静态页面转成jsp。一旦这时候出现了什么问题，两个人的交流成本很大。而且，前端的代码和后端的代码，就是直接混合在一起，耦合度太高，开发效率低，维护成本高。</p><p>采用前后端分离的方式进行开发，就可以解决这一问题。前端只需要独立编写客户端代码，后端也只需要独立编写服务端代码，提供数据接口。前端通过ajax请求来访问后端数据接口，将model展示到view中即可。前后端开发者，只需要提前约定好接口文档（URL，参数，数据类型，方法类型…）真正实现了前后端应用层解耦合</p><p>servelt通过el表达式解析到jsp中，再与jsp中不变的数据进行拼接，返回</p><p>前端–&gt;静态页面–&gt;后端–&gt;jsp</p><p>前端应用通过ajax请求去访问后端暴露的接口，后端返回json格式的数据</p><h3 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h3><p>Spring的两个重要特性：</p><p>​    1、IOC：控制反转——是一种设计思想，不需要在对象里，new一个别的对象。因为这样会增加对象之间的依赖。有了IOC之后，只需要将设计好的对象，交给第三方IOC容器去管控。我们只需要通过配置文件，来方便的创建，管理对象之间的依赖关系。</p><p>​    2、AOP：面向切面编程。</p><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><p>Vue的核心思想：</p><p>1、数据驱动</p><p>​    传统的开发方式中，当数据发生改变时，无论是通过ajax从后端获取来数据，还是通过用户交互改变数据，都需要需要手动触发DOM，先找到元素，再append等一系列操作，又繁琐又容易出错。而使用Vue我们就不需要手动操作DOM了，只需要关心数据，数据驱动DOM变化，DOM是数据的一种自然映射。</p><p>2、组件化</p><p>​    我认为组件化，就是将一堆的HTML标签封装在一起，</p><p>​    传统的前端和后端发生交互时，页面整个刷新，开销大，用户体验差。前端通过ajax访问后端的 RESTful 接口做通讯，异步刷新页面的某个区块，通过这种方式，来提高效率，优化体验。</p><p>​    MVVM：Model、View、ViewModel。Model代表的是数据，对应到前端就是JavaScript对象；View对应的是视图，对应到浏览器就是DOM；他们两个通过ViewModel做通讯，ViewModel实现了一个Observer观察者，当数据发生变化时，ViewModel可以观察到，并把他反应到DOM上，也就是通知对应的需要改变的DOM结点自动更新；当用户操作DOM时，ViewModel也可以观察到，并把相应的数据发生改变，这样就实现了v-bind双向绑定。</p><p>局部刷新，懒加载</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>考研</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>复试英语</title>
    <link href="/2022/03/02/%E5%A4%8D%E8%AF%95%E8%8B%B1%E8%AF%AD/"/>
    <url>/2022/03/02/%E5%A4%8D%E8%AF%95%E8%8B%B1%E8%AF%AD/</url>
    
    <content type="html"><![CDATA[<h1 id="复试英语考什么？"><a href="#复试英语考什么？" class="headerlink" title="复试英语考什么？"></a>复试英语考什么？</h1><h2 id="口语"><a href="#口语" class="headerlink" title="口语"></a>口语</h2><h3 id="自我介绍-老师提问"><a href="#自我介绍-老师提问" class="headerlink" title="自我介绍+老师提问"></a>自我介绍+老师提问</h3><h3 id="老师必问的九个问题"><a href="#老师必问的九个问题" class="headerlink" title="老师必问的九个问题"></a>老师必问的九个问题</h3><blockquote><p>为什么考研？为什么选择这个专业？</p></blockquote><blockquote><p>对未来有什么规划？读研规划？</p></blockquote><p>If I am luckily admitted, I will achieve the following goals during the next three-year study. First ofall, I will try my best to finish all the courses needed for my graduation, pass all the exams and get all the credits in the first year. Then, in the second year, I am going to start reading papers and periodicals as well as doing some academic research with the seniors and my mentor. What’s more, I would try to issue a few papers on some influential academic websites. At last, I will finish my graduation thesis in the third year, take part in internships, and prepare for my future employment. I believe my post-graduation life would be enriched and meaningful.</p><blockquote><p>介绍一下你的家乡？</p></blockquote><blockquote><p>介绍你的家庭？</p></blockquote><p>The person I admire most is my father. He is a kind, upright and hard-working man. He always works diligently and contributes himself to our family. What I admire most about him is his emphasis on details. he is always very prudent about his work and seldom makes mistakes. I often see him checking files carefully even if it’s late at night, which motivates me to learn from him. In my future study and life, I will always remind myself that I should be detail-oriented, treat my study seriously as my father do to his work.</p><blockquote><p>介绍你的本科学校</p></blockquote><p>我很我爱我的本科学校，虽然它没有很大的名气，但是老师很负责很认真，尽可能的把自己的知识传授给我们。认识了很多好朋友，他们和我一起成长。如果有幸被录取，希望能在咱们学校也能遇到良师益友，遇见更好的自己。</p><blockquote><p>说说你对英语的态度</p></blockquote><p>小时候对</p><blockquote><p>你对我们学校和专业你了解多少?</p></blockquote><blockquote><p>说一下自己的优缺点</p></blockquote><p>优点和专业相关，缺点和专业无关。如果能被录取，克服缺点。</p><hr><h2 id="做事不要想立即的回报"><a href="#做事不要想立即的回报" class="headerlink" title="做事不要想立即的回报"></a>做事不要想立即的回报</h2><h2 id="人品好"><a href="#人品好" class="headerlink" title="人品好"></a>人品好</h2><h2 id="努力-正直"><a href="#努力-正直" class="headerlink" title="努力 正直"></a>努力 正直</h2>]]></content>
    
    
    <categories>
      
      <category>考研</category>
      
    </categories>
    
    
    <tags>
      
      <tag>考研</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flex布局</title>
    <link href="/2022/02/28/Flex%E5%B8%83%E5%B1%80/"/>
    <url>/2022/02/28/Flex%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="第15节：flex布局"><a href="#第15节：flex布局" class="headerlink" title="第15节：flex布局"></a>第15节：flex布局</h1><h3 id="一、flex布局概述"><a href="#一、flex布局概述" class="headerlink" title="一、flex布局概述"></a>一、flex布局概述</h3><p>此前我们制作的所有网页都是基于盒子模型和浮动布局完成的，本节我们一起学习弹性布局（或者叫弹性盒子布局），这是一种更先进的布局方式，可以让网页布局更简洁，更易于维护。</p><p>本节会针对flex布局的常用属性，讲解如何将flex布局应用到实际项目中。</p><h3 id="二、flex容器"><a href="#二、flex容器" class="headerlink" title="二、flex容器"></a>二、flex容器</h3><p>将一个元素设置如下属性</p><figure class="highlight css"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span>&#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>&#125;<br></code></pre></td></tr></table></figure><p>此容器会变成一个flex容器（flex container），容器内部的元素被称为flex项目（flex item），在这个容器内部浮动会失效，通过设置flex容器的css样式，可以改变内部项目的布局方式。</p><p>我们先来了解一些flex布局的基本概念，示例图如下所示</p><p><img src="../images/0120_img0.png" alt="Flex布局的基本概念"></p><p>一个flex容器默认存在两个轴，横向的主轴（main轴）和纵向的交叉轴（cross轴）。默认情况下flex项目按照main轴排列，通过设置，可以让项目按照cross轴排列，示例代码如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span>&#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>&#125;<br><span class="hljs-selector-class">.box</span>&#123;<br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid red;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过上面的案例，大家可以看到，默认情况下flex容器内部的元素是按照主轴排列的，并且块元素不会独立成行。</p><h4 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h4><p>通过flex-direction属性，可以设置flex容器按主轴或是交叉轴排列。</p><ul><li>flex-direction:row;默认值，项目按主轴排列，高度为容器高度。</li><li>flex-direction:column;项目按交叉轴排列，长度为容器长度。</li></ul><p>示例代码如下所示：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span>&#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-comment">/* flex-direction: column; */</span><br>    <span class="hljs-attribute">flex-direction</span>: row;<br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#00f</span>;<br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">200px</span>;<br>&#125;<br><span class="hljs-selector-class">.box</span>&#123;<br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid red;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里大家可以直观地看到，让flex项目按照主轴排列，此功能可以完全取代浮动布局，而且不必考虑浮动元素脱离文档流的种种弊端。如果不考虑浏览器兼容问题，那么flex布局大部分情况都可以很好地替代浮动布局。</p><h4 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h4><p>justify-content属性可以控制flex项目在容器中的水平排列方式，示例代码如下所示</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span>&#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#00f</span>;<br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">200px</span>;<br>    <span class="hljs-comment">/* flex项目按水平排列 */</span><br>    <span class="hljs-attribute">justify-content</span>:center;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>justify-content:flex-start;flex项目在主轴开始位置展示</li><li>justify-content:flex-end;flex项目在主轴结束位置展示</li><li>justify-content:flex-center;flex项目在主轴居中展示</li></ul><p>此前我们将一个元素居中显示，通常将设置元素设置为固定宽度，然后为其设置属性margin：0 auto;对于宽度不固定的元素，我们只能使用一些奇淫技巧让其居中。</p><p>现在有了flex布局，我们可以很轻易的让一个或多个不定宽度的元素居中。</p><h4 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h4><p>align-items属性可以控制flex项目在容器中的垂直排列方式，示例代码如下所示</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span>&#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#00f</span>;<br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">justify-content</span>: center;<br>    <span class="hljs-attribute">align-items</span>: center;<br>&#125;<br><span class="hljs-selector-class">.box</span>&#123;<br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#f00</span>;<br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">50px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>align-items:flex-start;flex项目在交叉轴开始位置展示</li><li>align-items:flex-end;flex项目在交叉轴结束位置展示</li><li>align-items:flex-center;flex项目在交叉轴居中展示</li></ul><h3 id="三、flex项目"><a href="#三、flex项目" class="headerlink" title="三、flex项目"></a>三、flex项目</h3><h4 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box item&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span>&#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#00f</span>;<br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">justify-content</span>: center;<br>    <span class="hljs-attribute">align-items</span>: center;<br>&#125;<br><span class="hljs-selector-class">.box</span>&#123;<br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#f00</span>;<br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">50px</span>;<br>&#125;<br><span class="hljs-selector-class">.item</span>&#123;<br>    <span class="hljs-attribute">align-self</span>: flex-start;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box item1&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box item2&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box item3&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span>&#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#00f</span>;<br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">justify-content</span>: center;<br>    <span class="hljs-attribute">align-items</span>: center;<br>&#125;<br><span class="hljs-selector-class">.box</span>&#123;<br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#f00</span>;<br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">50px</span>;<br>&#125;<br><span class="hljs-selector-class">.item1</span>&#123;<br>    <span class="hljs-attribute">flex</span>:<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-selector-class">.item2</span>&#123;<br>    <span class="hljs-attribute">flex</span>:<span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-selector-class">.item3</span>&#123;<br>    <span class="hljs-attribute">flex</span>:<span class="hljs-number">3</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>考研复试</title>
    <link href="/2022/02/25/%E8%80%83%E7%A0%94%E5%A4%8D%E8%AF%95/"/>
    <url>/2022/02/25/%E8%80%83%E7%A0%94%E5%A4%8D%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="英文面试"><a href="#英文面试" class="headerlink" title="英文面试"></a>英文面试</h1><h2 id="常见问题及答案"><a href="#常见问题及答案" class="headerlink" title="常见问题及答案"></a>常见问题及答案</h2><p>前两个答案范读：<a href="https://www.bilibili.com/video/BV15A411u7Du?spm_id_from=333.999.0.0">https://www.bilibili.com/video/BV15A411u7Du?spm_id_from=333.999.0.0</a> 评论区找时间戳</p><blockquote><p><strong>why do you want to go to graduate school instead of finding a job?</strong></p></blockquote><p>I think with three more years of graduate education,I will be better prepared to work in this field.Because based on my research and talking with many people who work in the industry,having a graduate degree is critical to further your career in internet industry.And druing my graduate study,I don’t plan on only doing academic studies. I also would like to take on internships and to further expose myself to the real world so that I can better put what I learning into practice.</p><blockquote><p><strong>Why did you choose our university?</strong></p></blockquote><p>I think the university has excellent resources,both inside and outside of the classroom.Inside the classroom,there are excellent faculty and staff members,particularly many professors in the field of who are renowned experts on the national level .And out classroom,the university has many alumni who work in the field of internet.And there are many events in the school which connect the alumni With current students .These two points deeply attracted me, so I chose this school.</p><blockquote><p><strong>Introduce your hometown.</strong></p></blockquote><p>Shijiazhuang is the capital of HeBei Provincece,a beautiful combination of antiquity and modernity. China’s oldest stone segmental arch bridge, the Zhaozhou Bridge, has spanned the Jiao River for 1,400 years. As the world’s first stone segmental arch bridge , it predates other bridges of its type throughout the world by 800 years.Shijiazhuang City is “National Advanced City of Science and Education”, with strong technical force.Meanwhile as “Chinese Medicine Capital”, its overall strength of Medicine industry ranks first in China. I love my hometown. Welcome to Shijiazhuang.</p><blockquote><p><strong>Introduce your family</strong></p></blockquote><p>The person I admire most is my father. He is a kind, upright and hard-working man. He always works diligently and contributes himself to our family. What I admire most about him is his emphasis on details. he is always very prudent about his work and seldom makes mistakes. I often see him checking files carefully even if it’s late at night, which motivates me to learn from him. In my future study and life, I will always remind myself that I should be detail-oriented, treat my study seriously as my father do to his work.</p><blockquote><p><strong>Introduce your undergraduate school</strong></p></blockquote><blockquote><p><strong>Tell me about your attitude towards English</strong></p></blockquote><blockquote><p>How much do you know about our school and major?</p></blockquote><p>​    答案同为什么选择我们大学</p><blockquote><p>Talk about your strengths and weaknesses</p></blockquote><h2 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h2><p>第二段待选</p><hr><p>尊敬的各位老师，大家好：</p><p>​    非常荣幸可以参加咱们西安邮电大学的复试。我叫徐富杰。可能您会看到我的教 育经历和其他同学有一些不一样，是的，我是专接本的考生。在2020年河北省专接本 考试中，我以专业排名全省第三的成绩，考入了华北理工大学。专业课考试科目是微 机原理及接口技术含汇编语言。</p><p>​    专科的学习经历呢，是我的一个标签，一段经历，甚至可以说是一种优势。正是因为我从专科升到本科，我更明白什么是长期而稳定的努力，安定而缓慢的成长;更清楚的知道环境对人的重要性;同时也更加渴望一个更高的学历，更高的平台。我相信，我能从一个相对较低的起点，坐到各位导师面前参加复试，以后通过自己到努力也会登上一个更高更大的舞台;我相信实力加努力加上不断的学习，一定能够使自己成为一名合格的西邮人，也衷心的希望能够得到各位老师能够承认和信任。谢谢大家。</p><hr><h3 id="英文自我介绍"><a href="#英文自我介绍" class="headerlink" title="英文自我介绍"></a>英文自我介绍</h3><p>Dear committee members，</p><p>​        Good Morning/ Afternoon, I am XuFujie. I am excited that I have this opportunity to study on such a great academic platform and communicate with so many outstanding professors and peers. Compared with most other candidates, maybe I have a different study background. First, I studied in a college, and after three years of hard work, I successfully enrolled in the North China University of Science and Technology with an excellent grade. In the professional examination, the Microcomputer principle and Interface Technology, I ranked 3rd place in Hebei Province. This unique experience taught me how important the study environment is and how to pursue my long-term goals even in a difficult situation. </p><p>​        Later, in the university stage, I focused on computer science technology and gradually realized that I should learn more in a better environment to build the systematic structure of computer science. Thus, I prepared for the Graduate Enrollment Examination. For future studies, I hope to explore more unknowns in the area of big data and artificial intelligence. I am especially interested in learning-based methods such as classical machine learning or advanced deep learning methods. </p><p>​        To sum up, I believe Xiyou university is the best choice for me to achieve my further academic pursuit. And with my solid basis and great interests in computer science, my special educational experience, and my determination for further study, I believe I will be a qualified candidate at your university. Thanks for your time.</p><h2 id="专业问题备用"><a href="#专业问题备用" class="headerlink" title="专业问题备用"></a>专业问题备用</h2><h3 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h3><p>首先，跨域问题是前端的错误，是浏览器的一种保护机制。浏览器有同源策略。后端接受到请求了，也返回相应结果了，但浏览器拦截了</p>]]></content>
    
    
    <categories>
      
      <category>考研</category>
      
    </categories>
    
    
    <tags>
      
      <tag>考研</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue概述</title>
    <link href="/2022/02/22/Vue%E6%A6%82%E8%BF%B0/"/>
    <url>/2022/02/22/Vue%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="安装和引入Vue-js"><a href="#安装和引入Vue-js" class="headerlink" title="安装和引入Vue.js"></a>安装和引入Vue.js</h1><h4 id="使用vue还是jQuery"><a href="#使用vue还是jQuery" class="headerlink" title="使用vue还是jQuery"></a>使用vue还是jQuery</h4><p>jQuery仍然有自己的优势，制作一些相对简单的网站，或者是网站的部分活动页面，使用jQuery仍然可以提升开发效率。但是面对稍微具备规模的web应用，vue绝对是更好的选择。</p><h3 id="一、第一个Vue项目"><a href="#一、第一个Vue项目" class="headerlink" title="一、第一个Vue项目"></a>一、第一个Vue项目</h3><p>有两种方法可以在自己的项目中引入Vue：</p><ul><li>第一种是像引入jQuery一样，引入Vue.js文件。</li><li>第二种是使用Node环境，构建基于Vue的web项目。</li></ul><p>在真实的项目开发中，都会使用第二种开发方式，本节我们先以第一种-引入Vue.js文件方式起步。</p><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        &#123;&#123;message&#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript">                <span class="hljs-attr">message</span>:<span class="hljs-string">&quot;hello world&quot;</span></span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;).$mount(<span class="hljs-string">&quot;#app&quot;</span>)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们再来看一下上面的代码，它包含了一个vue程序最基本的结构：</p><p>首先，我们在html中定义了一个id为app的容器，然后我们在js创建一个Vue的实例，通过el属性指定这个容器，从而实现让js接管html.</p><p>每个 Vue 应用都是通过用 Vue 函数创建一个新的 Vue 实例开始的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-comment">// 选项</span><br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>在构造函数Vue中，我们需要传入一个【选项对象】来进一步描述vue实例的行为。</li><li>$mount方法，将Vue挂载到html。</li><li>el属性，作用于$mount相同。</li><li>data属性，在Vue的实例之下添加属性。</li><li><code>&#123;&#123;&#125;&#125;</code>可以输入一个表达式，也可以直接获取Vue实例的属性。</li></ul><h3 id="二、绑定属性"><a href="#二、绑定属性" class="headerlink" title="二、绑定属性"></a>二、绑定属性</h3><p>上面的例子中，我们将一个data中的message属性通过双花括号显示在文本节点之中，除此之外，我们还可以将数据绑定成为一个html属性，示例代码如下所示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-bind:title</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span>鼠标停留在这个H1标签上，可以看到title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span>鼠标停留在这个H1标签上，可以看到title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../script/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript">                <span class="hljs-attr">message</span>:<span class="hljs-string">&quot;hello world&quot;</span></span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;).$mount(<span class="hljs-string">&quot;#app&quot;</span>)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用【v-bind:属性名】和【:属性名】两种方式都可以绑定属性，在实际开发中，我们通常使用简写。</p><h3 id="三、绑定事件"><a href="#三、绑定事件" class="headerlink" title="三、绑定事件"></a>三、绑定事件</h3><p>在【选项对象】中可以设置methods属性为vue的示例添加方法，这些方法我已直接被调用，也可以绑定为事件。绑定事件的方法如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;fun&quot;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;fun&quot;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../script/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">methods</span>:&#123;</span><br><span class="javascript">                <span class="hljs-function"><span class="hljs-title">fun</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    alert(<span class="hljs-string">&quot;hello world&quot;</span>)</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;).$mount(<span class="hljs-string">&quot;#app&quot;</span>)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用【v-on:事件类型】和【@事件类型】两种方式都可以为元素绑定事件，在实际开发中，通常使用简写。</p><p>methods属性中定义的方法内部，可以使用this获取到vue的示例，也就是说我们可以进一步通过this获取到data中的属性，而且可以通过赋值的方式改变data中的属性值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeTitle&quot;</span>&gt;</span>改变标题<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../script/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript">                <span class="hljs-attr">title</span>:<span class="hljs-string">&quot;hello world&quot;</span></span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">methods</span>:&#123;</span><br><span class="javascript">                <span class="hljs-function"><span class="hljs-title">changeTitle</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.title = <span class="hljs-string">&quot;hello Vue&quot;</span>;</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;).$mount(<span class="hljs-string">&quot;#app&quot;</span>)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在上面的例子中，我们实现了通过按钮的点击事件改变h1中的文本内容。</p><h4 id="事件修饰符详解"><a href="#事件修饰符详解" class="headerlink" title="事件修饰符详解"></a>事件修饰符详解</h4><ul><li>.prevent:阻止元素的默认行为</li><li>.stop:阻止事件冒泡</li><li>.once:只触发一次事件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 阻止元素默认行为 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> @<span class="hljs-attr">submit.prevent</span>=<span class="hljs-string">&quot;postData&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">//jquery：操作DOM</span></span><br><span class="javascript">    <span class="hljs-keyword">const</span> vue = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        <span class="hljs-attr">methods</span>:&#123;</span><br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">postData</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;提交数据&quot;</span>);</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;);</span><br><span class="javascript">    vue.$mount(<span class="hljs-string">&quot;#app&quot;</span>)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 阻止事件冒泡 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.once</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">const</span> vue = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        <span class="hljs-attr">methods</span>:&#123;</span><br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;提交数据&quot;</span>);</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;);</span><br><span class="javascript">    vue.$mount(<span class="hljs-string">&quot;#app&quot;</span>)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="四、Vue的Demo"><a href="#四、Vue的Demo" class="headerlink" title="四、Vue的Demo"></a>四、Vue的Demo</h4><p>计数器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br>    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;&gt;&lt;/script&gt;<br>    &lt;title&gt;计数器&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;div id=&quot;app&quot;&gt;<br>        &lt;button @click=&quot;minus&quot;&gt;-&lt;/button&gt;<br>        &lt;span&gt;&#123;&#123; number &#125;&#125;&lt;/span&gt;<br>        &lt;button @click=&quot;plus&quot;&gt;+&lt;/button&gt;<br>    &lt;/div&gt;<br><br>    &lt;script&gt;<br>        new Vue(&#123;<br>            el:&quot;#app&quot;,<br>            data:&#123;<br>                number:0<br>            &#125;,<br>            methods:&#123;<br>                minus()&#123;<br>                    this.number--;<br>                &#125;,<br>                plus()&#123;<br>                    this.number++;<br>                &#125;<br>            &#125;<br>        &#125;)<br>    &lt;/script&gt;<br>    <br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jQuery常用方法</title>
    <link href="/2022/01/15/jQuery%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <url>/2022/01/15/jQuery%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="jQuery常用方法"><a href="#jQuery常用方法" class="headerlink" title="jQuery常用方法"></a>jQuery常用方法</h1><h3 id="一、事件概述"><a href="#一、事件概述" class="headerlink" title="一、事件概述"></a>一、事件概述</h3><p><strong>事件的基本概念</strong></p><p>通过事件我们可以加强用户与浏览器的交互性，例如可以实现当用户点击某个元素的时候，对元素做一些操作，或是移动鼠标，对元素做一些操作。</p><p><strong>事件的分类</strong></p><p>事件主要可以分为以下几类：</p><ul><li>鼠标事件</li><li>键盘事件</li><li>文档事件</li><li>表单事件</li><li>触摸事件</li><li>自定义事件</li></ul><p>本章我们主要讲解鼠标事件。</p><h3 id="二、鼠标单击事件"><a href="#二、鼠标单击事件" class="headerlink" title="二、鼠标单击事件"></a>二、鼠标单击事件</h3><p>我们先来将最常用的鼠标单击事件click，jQuery的基本语法如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;selector&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">//事件触发执行的代码</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>我们先通过$(“selector”)选择器获取元素，然后通过click为元素定义事件，这样当我们用鼠标单击这个元素的时候，就会执行花括号中的代码。</p><p><strong>输出文字</strong></p><p>我们现在实现一个功能，当我们点击一个按钮的时候，在控制台输出”hello world”,代码如下所示。<a href="https://github.com/xiaozhoulee/xiaozhou-examples/blob/master/03-jQuery/%E7%AC%AC02%E8%8A%82%EF%BC%9A%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A/demo01.html">demo01.html</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">$(<span class="hljs-string">&quot;button&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;hello world&quot;</span>);</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>切换图片</strong></p><p>结合我们上一章的内容，来实现一个功能，当我们点击按钮的时候，将一张图片切换成另一张图片,代码如下所示。<a href="https://github.com/xiaozhoulee/xiaozhou-examples/blob/master/03-jQuery/%E7%AC%AC02%E8%8A%82%EF%BC%9A%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A/demo02.html">demo02.html</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/0302_img0.jpg&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">$(<span class="hljs-string">&quot;img&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">$(<span class="hljs-built_in">this</span>).attr(<span class="hljs-string">&quot;src&quot;</span>,<span class="hljs-string">&quot;images/0302_img1.jpg&quot;</span>)</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p> 在上面的代码中，$(this)对应的就是我们点击的这个元素，也就是img标签，当我们点击img标签的时候，使用attr方法将其src属性设置成另一张了图片的地址，这样就实现了图片的切换。</p><p><strong>获取索引</strong></p><p>接下来我们要实现一个更复杂的效果：点击一个数字列表来实现切换图片的功能，列表有三个数字，对应着三张不同的图片。</p><p>要实现这样的功能，很多同学会想到，给数字列表分别绑定事件，每一个事件都对应不同的图片就可以了，虽然这样可以实现我们要的功能，但是如果需求又增加了两张图片，那我们就又要多定义两个事件，所以这个方案是不合理的。</p><p>我们需要的是用一个选择器找到所有的数字列表，让后统一绑定一个事件，然后在点击数字列表的时候，让程序找到我们点击的是第几个，然后切换到对应的图片，就可以了。下面的代码可以让我们判断是第几个元素触发了事件,当点击时会输出对应的下角标。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        $(<span class="hljs-string">&quot;li&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> i = $(<span class="hljs-built_in">this</span>).index();</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(i);</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>在上面的代码中，index方法可以获取元素的索引，索引就是当前元素在其同级的元素中排第几个，从0开始计数。</li><li>我们将index获取到的索引值赋值给变量i，并输出i就看到了这个元素的索引。</li></ul><p><strong>切换图片</strong></p><p>找到了列表的索引，我们下一步就要实现图片切换的功能了，首先我们需要了解数组的概念，数组是一个集合，我们将3章图片的路径放到了数组中，这样我们就可以通过数组的下标来获取到数组的元素了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;images/0302_img0.jpg&quot;</span>,<span class="hljs-string">&quot;images/0302_img1.jpg&quot;</span>,<span class="hljs-string">&quot;images/0302_img2.jpg&quot;</span>];<br>arr[<span class="hljs-number">0</span>]  <span class="hljs-comment">//images/0302_img0.jpg</span><br>arr[<span class="hljs-number">1</span>]  <span class="hljs-comment">//images/0302_img1.jpg</span><br>arr[<span class="hljs-number">2</span>]  <span class="hljs-comment">//images/0302_img2.jpg</span><br></code></pre></td></tr></table></figure><p>上面的代码可以了解到，我们可以通过数组的下标来获取数组中的元素。</p><p>接下来，我们结合之前学过的方法来实现一个图片切换的效果,代码如下所示。<a href="https://github.com/xiaozhoulee/xiaozhou-examples/blob/master/03-jQuery/%E7%AC%AC02%E8%8A%82%EF%BC%9A%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A/demo03.html">demo03.html</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/0302_img0.jpg&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;images/0302_img0.jpg&quot;</span>,<span class="hljs-string">&quot;images/0302_img1.jpg&quot;</span>,<span class="hljs-string">&quot;images/0302_img2.jpg&quot;</span>];</span><br><span class="javascript">        $(<span class="hljs-string">&quot;li&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> i = $(<span class="hljs-built_in">this</span>).index();</span><br><span class="javascript">            <span class="hljs-keyword">var</span> url = arr[i];  <span class="hljs-comment">//获取图片的地址</span></span><br><span class="javascript">            $(<span class="hljs-string">&quot;img&quot;</span>).attr(<span class="hljs-string">&quot;src&quot;</span>,url);  <span class="hljs-comment">//将图片的src属性设置成数组中指定的图片地址</span></span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这样，当我们点击数字列表的时候，就可以实现图片切换的功能了。</p><h3 id="三、其他鼠标事件"><a href="#三、其他鼠标事件" class="headerlink" title="三、其他鼠标事件"></a>三、其他鼠标事件</h3><p><strong>鼠标移入移出改变样式</strong></p><p>鼠标的移入和一出事件分别是mouseenter和mouseleave。我们来实现一个功能，当我们的鼠标移入一个div的时候，让其变为红色，移出的时候，让其变为绿色，代码如下：<a href="https://github.com/xiaozhoulee/xiaozhou-examples/blob/master/03-jQuery/%E7%AC%AC02%E8%8A%82%EF%BC%9A%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A/demo04.html">demo04.html</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span>&#123;<br>        <span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;<br>        <span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span>;<br>        <span class="hljs-attribute">background-color</span>:red;<br>    &#125;<br>    <span class="hljs-selector-class">.bg</span>&#123;<br>        <span class="hljs-attribute">background-color</span>: green<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    $(<span class="hljs-string">&quot;.box&quot;</span>).mouseenter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        $(<span class="hljs-built_in">this</span>).addClass(<span class="hljs-string">&quot;bg&quot;</span>);</span><br><span class="javascript">    &#125;).mouseleave(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        $(<span class="hljs-built_in">this</span>).removeClass(<span class="hljs-string">&quot;bg&quot;</span>);</span><br><span class="javascript">    &#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br></code></pre></td></tr></table></figure><p>这里我们使用了链式操作，用一个选择器，绑定两个属性。</p><p>鼠标移入和移出事件可以简写成一个hover事件，上面的代码可以简写如下所示：<a href="https://github.com/xiaozhoulee/xiaozhou-examples/blob/master/03-jQuery/%E7%AC%AC02%E8%8A%82%EF%BC%9A%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A/demo05.html">demo05.html</a></p><p>hover有方法有两个参数，都是函数，分别对应着mouseenter和mouseleave的事件，这样写的效果与上面完全相同。</p><p><strong>鼠标移动获取坐标</strong></p><p>鼠标在元素上移动的时候也会触发事件，下面我们来实现一个功能，当鼠标移动到一个div的时候，获取鼠标在网页页面上的坐标,代码如下所示：<a href="https://github.com/xiaozhoulee/xiaozhou-examples/blob/master/03-jQuery/%E7%AC%AC02%E8%8A%82%EF%BC%9A%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A/demo06.html">demo06.html</a></p><ul><li>在上面的代码中e是事件对象，我们可以通过它获取到x轴和y轴的坐标。</li><li>然后通过console.log()方法在控制台输出x坐标和y坐标。</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排序算法</title>
    <link href="/2022/01/14/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <url>/2022/01/14/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>特点：稳定、对于链表也没问题</p><p>tips：</p><p>​    设置一个flag标记，用来标记冒泡排序过程中是否发生了交换。如果没有发生交换，则说明数组已经有序，任务完成，可以退出循环，提高效率。</p><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Bubble_Sort</span><span class="hljs-params">(ElementType a[],<span class="hljs-keyword">int</span> n)</span></span>&#123;<br><span class="hljs-keyword">int</span> flag = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = n<span class="hljs-number">-1</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++)&#123;<br><span class="hljs-keyword">if</span>(a[j] &gt; a[j+<span class="hljs-number">1</span>])&#123;<br>Swap(&amp;a[j],&amp;a[j+<span class="hljs-number">1</span>]);<br>flag = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(flag == <span class="hljs-number">1</span>)<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>特点：稳定。</p><h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电影</title>
    <link href="/2022/01/13/%E7%94%B5%E5%BD%B1/"/>
    <url>/2022/01/13/%E7%94%B5%E5%BD%B1/</url>
    
    <content type="html"><![CDATA[<h1 id="电影"><a href="#电影" class="headerlink" title="电影"></a>电影</h1><h2 id="战争"><a href="#战争" class="headerlink" title="战争"></a>战争</h2><h3 id="《1917》"><a href="#《1917》" class="headerlink" title="《1917》"></a>《1917》</h3><figure class="highlight markdown"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs markdown">&#123;% note info 和爱豆一起看的第一个，真好看，一镜到底太爽了 %&#125;<br></code></pre></td></tr></table></figure><h3 id="《血战钢锯岭》"><a href="#《血战钢锯岭》" class="headerlink" title="《血战钢锯岭》"></a>《血战钢锯岭》</h3><h3 id="《决战中途岛》"><a href="#《决战中途岛》" class="headerlink" title="《决战中途岛》"></a>《决战中途岛》</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% note success  画面挺震撼的，但沉浸感好像不强 %&#125;<br></code></pre></td></tr></table></figure><h3 id="《拯救大兵瑞恩》"><a href="#《拯救大兵瑞恩》" class="headerlink" title="《拯救大兵瑞恩》"></a>《拯救大兵瑞恩》</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% note success  经典老片了，很好看 %&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="《沉默的羔羊》"><a href="#《沉默的羔羊》" class="headerlink" title="《沉默的羔羊》"></a>《沉默的羔羊》</h3><h3 id="《绿皮书》"><a href="#《绿皮书》" class="headerlink" title="《绿皮书》"></a>《绿皮书》</h3><h3 id="《怦然心动》"><a href="#《怦然心动》" class="headerlink" title="《怦然心动》"></a>《怦然心动》</h3><hr><h2 id="国产"><a href="#国产" class="headerlink" title="国产"></a>国产</h2><h3 id="《活着》"><a href="#《活着》" class="headerlink" title="《活着》"></a>《活着》</h3><h3 id="《霸王别姬》"><a href="#《霸王别姬》" class="headerlink" title="《霸王别姬》"></a>《霸王别姬》</h3><h3 id="《芳华》"><a href="#《芳华》" class="headerlink" title="《芳华》"></a>《芳华》</h3><h3 id="《我不是药神》"><a href="#《我不是药神》" class="headerlink" title="《我不是药神》"></a>《我不是药神》</h3>]]></content>
    
    
    <categories>
      
      <category>娱乐</category>
      
    </categories>
    
    
    <tags>
      
      <tag>电影</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>npm常用命令</title>
    <link href="/2022/01/13/npm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/01/13/npm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="npm常用命令"><a href="#npm常用命令" class="headerlink" title="npm常用命令"></a>npm常用命令</h1><h3 id="一、npm安装第三方模块"><a href="#一、npm安装第三方模块" class="headerlink" title="一、npm安装第三方模块"></a>一、npm安装第三方模块</h3><p>npm有两种方式安装第三方模块：本地安装和全局安装，使用哪种安装方式，取决于我们用npm模块来做什么。</p><ul><li>如果模块作为项目的依赖，需要被引入到指定项目当中，需要本地安装。</li><li>如果需要模块提供某些命令工具，则需要全局安装。</li></ul><p>稍后我们就来样式两种安装的区别。</p><h4 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装"></a>本地安装</h4><p>我们先打开windows命令行工具，进入到需要安装第三方模块的目录，例如D:/npmtest目录，然后执行下面命令</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">npm install query<br></code></pre></td></tr></table></figure><p>安装完成之后，npm会在D:/npmtest目录下创建一个node_modules的目录，然后将npm模块下载到这个目录之下。上面的例子我们安装的是jQuery，所以打开node_modules会看到一个jQuery的目录。</p><p>关于第三方模块如何在node项目中使用，我们下一节会讲解。</p><h4 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h4><p>某些第三方模块为我们提供了一些功能需要全局安装才可以使用，例如<code>http-server</code>，他可以为我们提供一个创建静态文件服务器的功能。</p><p>现在我们就来下载这个模块，全局安装需要在命令中添加-g，示例代码如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g http-server<br></code></pre></td></tr></table></figure><p>下载完成之后，http-server模块不会像本地安装那样下载到当前目录下，而是会下载到系统目录中，win10系统下载目录如下所示：</p><blockquote><p>C:\Users\Administrator\AppData\Roaming\npm\node_modules</p></blockquote><p>我们不必去打开这个目录去浏览下载的文件，只要知道全局安装之后，我们可以使用这个模块提供的精灵。</p><p>http-server模块提供了http-server命令，可以用此命令创建一个静态服务器，步骤如下：</p><ol><li>选择开启服务器的目录，这里选择D:/test/server目录。</li><li>在这个目录中执行http-server命令，默认端口为8080。</li><li>在server目录中创建一个index.html文件。</li><li>打开浏览器，访问<a href="http://127.0.0.1:8080/index.html%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0index.html%E6%96%87%E4%BB%B6%E7%9A%84%E5%86%85%E5%AE%B9%E3%80%82">http://127.0.0.1:8080/index.html，可以看到index.html文件的内容。</a></li><li>如果服务器与其他设备处于同一网络（例如同一wify下的手机和电脑），可以使用ip地址访问此网页。</li></ol><p>大家可能对服务器的概念不是特别了解，关于服务器的概念，我们会在后续章节。</p><h3 id="二、npm项目初始化"><a href="#二、npm项目初始化" class="headerlink" title="二、npm项目初始化"></a>二、npm项目初始化</h3><p>使用如下命令，可以在当前目录编程一个node项目（实质上就是添加了一个package.json文件）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm init<br></code></pre></td></tr></table></figure><p>执行命令之后会有一些列提示，一直按回车选择默认项即可。创建完成之后会生成一个package.json文件，文件内容如下所示：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;test&quot;</span>,<br>  <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;1.0.0&quot;</span>,<br>  <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-attr">&quot;main&quot;</span>: <span class="hljs-string">&quot;index.js&quot;</span>,<br>  <span class="hljs-attr">&quot;dependencies&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;vue&quot;</span>: <span class="hljs-string">&quot;^2.6.10&quot;</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;devDependencies&quot;</span>: &#123;&#125;,<br>  <span class="hljs-attr">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;test&quot;</span>: <span class="hljs-string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;author&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-attr">&quot;license&quot;</span>: <span class="hljs-string">&quot;ISC&quot;</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>这个文件用来记录项目的详细信息，包括项目名称、依赖模块等。</p><h4 id="安装第三方依赖"><a href="#安装第三方依赖" class="headerlink" title="安装第三方依赖"></a>安装第三方依赖</h4><p>通过下列命令，可以将安装的第三方依赖记录在package.json文件中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save jquery<br>npm install --save bootstrap<br></code></pre></td></tr></table></figure><p>下载完成之后，可以看到在dependencies字段下面记录了我们下载模块的名称和版本。这样，只要有了这个文件，我们就知道整个node项目需要依赖哪些第三方模块了。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;test&quot;</span>,<br>  <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;1.0.0&quot;</span>,<br>  <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-attr">&quot;main&quot;</span>: <span class="hljs-string">&quot;index.js&quot;</span>,<br>  <span class="hljs-attr">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;test&quot;</span>: <span class="hljs-string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;author&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-attr">&quot;license&quot;</span>: <span class="hljs-string">&quot;ISC&quot;</span>,<br>  <span class="hljs-attr">&quot;dependencies&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;bootstrap&quot;</span>: <span class="hljs-string">&quot;^4.4.1&quot;</span>,<br>    <span class="hljs-attr">&quot;jquery&quot;</span>: <span class="hljs-string">&quot;^3.4.1&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>下载多个模块可以简写：npm install –save jquery boostrap，模块名之间用空格分开。</p></blockquote><h3 id="三、通过配置文件安装依赖"><a href="#三、通过配置文件安装依赖" class="headerlink" title="三、通过配置文件安装依赖"></a>三、通过配置文件安装依赖</h3><p>在实际开发的过程中，项目代码可能会分享给他人或传输到互联网上，我们没有必要将依赖模块的代码一并传输，只需要传输一个package.json文件即可。</p><p>有了这个配置文件，其他人接收到项目代码之后，只需要执行下面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install<br></code></pre></td></tr></table></figure><p>npm便会根据package.json文件中的记录下载所有依赖模块。</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网页重构</title>
    <link href="/2022/01/13/%E7%BD%91%E9%A1%B5%E9%87%8D%E6%9E%84/"/>
    <url>/2022/01/13/%E7%BD%91%E9%A1%B5%E9%87%8D%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="网页重构"><a href="#网页重构" class="headerlink" title="网页重构"></a>网页重构</h1><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><h3 id="输入框"><a href="#输入框" class="headerlink" title="输入框"></a>输入框</h3><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Placeholder ：用于显示输入框中的提示信息</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="下拉框"><a href="#下拉框" class="headerlink" title="下拉框"></a>下拉框</h3><h3 id="单选框"><a href="#单选框" class="headerlink" title="单选框"></a>单选框</h3><h3 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h3><h3 id="HTML元素的分类"><a href="#HTML元素的分类" class="headerlink" title="HTML元素的分类"></a>HTML元素的分类</h3><h4 id="块元素：宽高可以设置，独立成行-h1-h6-p-div-ul-li"><a href="#块元素：宽高可以设置，独立成行-h1-h6-p-div-ul-li" class="headerlink" title="块元素：宽高可以设置，独立成行 h1-h6,p,div,ul,li"></a>块元素：宽高可以设置，独立成行 h1-h6,p,div,ul,li</h4><h4 id="行内元素：宽高不可以设置，不独立成行-a-span"><a href="#行内元素：宽高不可以设置，不独立成行-a-span" class="headerlink" title="行内元素：宽高不可以设置，不独立成行 a,span"></a>行内元素：宽高不可以设置，不独立成行 a,span</h4><h4 id="行内块元素：宽高可以设置，不独立成行-img-input-button"><a href="#行内块元素：宽高可以设置，不独立成行-img-input-button" class="headerlink" title="行内块元素：宽高可以设置，不独立成行 img,input,button"></a>行内块元素：宽高可以设置，不独立成行 img,input,button</h4><h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><p>只要在想清楚浮动的容器上，再加一个名为clear的class即可</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*  把before和after转换为块元素，并且块元素的内容content是空的 */</span><br>        <span class="hljs-selector-class">.clear</span><span class="hljs-selector-pseudo">::before</span>,<span class="hljs-selector-class">.clear</span><span class="hljs-selector-pseudo">::after</span>&#123;<br>            <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-attribute">display</span>: block;<br>            <span class="hljs-attribute">clear</span>: both;<br>        &#125;<br></code></pre></td></tr></table></figure><h3 id="子绝父相"><a href="#子绝父相" class="headerlink" title="子绝父相"></a>子绝父相</h3><p>子元素以父元素为参照物，随着网页大小改变，父子元素相对位置不变</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.pic-box</span>&#123;<br>            <span class="hljs-attribute">width</span>: <span class="hljs-number">628px</span>;<br>            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>            <span class="hljs-attribute">position</span>: relative;<br>        &#125;<br>        <span class="hljs-selector-class">.list</span>&#123;<br>            <span class="hljs-attribute">position</span>: absolute;<br>            <span class="hljs-attribute">left</span>: <span class="hljs-number">100px</span>;<br>            <span class="hljs-attribute">top</span>: <span class="hljs-number">200px</span>;<br>        &#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pic-box&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/success.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="border在盒子内部显示"><a href="#border在盒子内部显示" class="headerlink" title="border在盒子内部显示"></a>border在盒子内部显示</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid blue;<br><span class="hljs-attribute">box-sizing</span>: border-box;<br></code></pre></td></tr></table></figure><p>​    box-sizing: border-box;    边框在盒子模型内部显示，不会挤跑外面的</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的第一篇博客文章</title>
    <link href="/2022/01/10/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
    <url>/2022/01/10/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p>内容</p><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p>内容</p><hr>]]></content>
    
    
    <categories>
      
      <category>随笔杂记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/01/09/hello-world/"/>
    <url>/2022/01/09/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><hr><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><h4 id="切换为root用户"><a href="#切换为root用户" class="headerlink" title="切换为root用户"></a>切换为root用户</h4><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">sudo su<br></code></pre></td></tr></table></figure><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><h4 id="进入blog所在目录"><a href="#进入blog所在目录" class="headerlink" title="进入blog所在目录"></a>进入blog所在目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> blog<br></code></pre></td></tr></table></figure><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><hr>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>axios</title>
    <link href="/2022/01/03/axios/"/>
    <url>/2022/01/03/axios/</url>
    
    <content type="html"><![CDATA[<h1 id="Ajax第三方模块"><a href="#Ajax第三方模块" class="headerlink" title="Ajax第三方模块"></a>Ajax第三方模块</h1><h3 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h3><p>在实际项目开发中，我们并不需要自己去封装Ajax模块，已经有很多成熟的Ajax第三方模块了，直接使用即可。</p><p>本节就来说说一个常用的Ajax第三方模块-Axios。</p><h3 id="二、下载并引入Axios"><a href="#二、下载并引入Axios" class="headerlink" title="二、下载并引入Axios"></a>二、下载并引入Axios</h3><p>可以直接使用npm下载Axios，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">npm install axios<br></code></pre></td></tr></table></figure><p>因为我们要将Axios引入到前端的页面，所以需要将axios.js文件拷贝到静态文件目录。</p><blockquote><p>在node_modules目录中，找到axios&gt;dist&gt;axios.min.js文件，拷贝到public目录中即可。然后在模板中用script标签来引入此js文件。</p></blockquote><h3 id="三、后台程序"><a href="#三、后台程序" class="headerlink" title="三、后台程序"></a>三、后台程序</h3><p>关于后台程序，我们仍然使用水果列表增删改查接口，实例代码如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//数据</span><br><span class="hljs-keyword">let</span> dataList = [<span class="hljs-string">&quot;香蕉&quot;</span>,<span class="hljs-string">&quot;苹果&quot;</span>,<span class="hljs-string">&quot;鸭梨&quot;</span>];<br><br><span class="hljs-comment">//get查看</span><br>router.get(<span class="hljs-string">&quot;/fruits&quot;</span>, <span class="hljs-function"><span class="hljs-params">ctx</span> =&gt;</span> &#123;<br>    ctx.body = dataList;<br>&#125;)<br><span class="hljs-comment">//post添加</span><br>router.post(<span class="hljs-string">&quot;/fruits&quot;</span>, <span class="hljs-function"><span class="hljs-params">ctx</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> fruit = ctx.request.body.fruit;<br>    dataList.push(fruit);<br>    ctx.body = dataList;<br>&#125;)<br><br><span class="hljs-comment">//put修改</span><br>router.put(<span class="hljs-string">&quot;/fruits/:id&quot;</span>, <span class="hljs-function"><span class="hljs-params">ctx</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> id = ctx.params.id;<br>    <span class="hljs-keyword">let</span> fruit = ctx.request.body.fruit;<br>    dataList.splice(id,<span class="hljs-number">1</span>,fruit);<br>    ctx.body = dataList;<br>&#125;)<br><span class="hljs-comment">//delete删除</span><br>router.delete(<span class="hljs-string">&quot;/fruits/:id&quot;</span>, <span class="hljs-function"><span class="hljs-params">ctx</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> id = ctx.params.id;<br>    dataList.splice(id,<span class="hljs-number">1</span>);<br>    ctx.body = dataList;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="四、Axios的常用方法"><a href="#四、Axios的常用方法" class="headerlink" title="四、Axios的常用方法"></a>四、Axios的常用方法</h3><p>接下来，使用axios实现用户列表的增删改查。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//get请求查询数据</span><br>axios.get(<span class="hljs-string">&quot;/fruits&quot;</span>).then( <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(res.data)<br>&#125; )<br><span class="hljs-comment">//post请求添加数据</span><br>axios.post(<span class="hljs-string">&quot;/fruits&quot;</span>,&#123;<br>    <span class="hljs-attr">fruit</span>:<span class="hljs-string">&quot;草莓&quot;</span><br>&#125;).then( <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(res.data)<br>&#125; )<br><span class="hljs-comment">//put请求修改数据</span><br>axios.put(<span class="hljs-string">&quot;/fruits/0&quot;</span>,&#123;<br>    <span class="hljs-attr">fruit</span>:<span class="hljs-string">&quot;西瓜&quot;</span><br>&#125;).then( <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(res.data)<br>&#125; )<br><span class="hljs-comment">//delete请求删除数据</span><br>axios.delete(<span class="hljs-string">&quot;/fruits/0&quot;</span>).then( <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(res.data)<br>&#125; )<br><br></code></pre></td></tr></table></figure><p>通过上面的代码可以看到，使用Axios完成异步的数据操作是非常简单的，我们在后续章节的Ajax相关内容，都会使用Axios来实现。</p><h3 id="五、jQuery中的ajax方法"><a href="#五、jQuery中的ajax方法" class="headerlink" title="五、jQuery中的ajax方法"></a>五、jQuery中的ajax方法</h3><p>我们之前使用jQuery主要是用来操作DOM，其实jQuery也封装了Ajax方法，实例代码如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">$.ajax(&#123;<br>    <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;/fruit&quot;</span>,<br>    <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;get&quot;</span><br>&#125;).done( <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(res);<br>&#125;)<br></code></pre></td></tr></table></figure><p>如果项目是基于jQuery开发的，jQuery中的Ajax方法可以完全替代Axios，但是如果项目并没有使用jQuery，那么使用Axios这种轻量级的Ajax库会更方便。</p><h3 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h3><p>本节主要讲解的是Ajax的使用方法，在实际项目开发中，Axios需要结合表单和表格元素完成数据的操作，并在页面中展示出操作的结果。大多时候都与Vue框架一起，完成前端数据的获取与展示。</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>

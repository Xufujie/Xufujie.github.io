<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Python基础</title>
    <link href="/2022/04/12/Python%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/04/12/Python%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Python学习笔记"><a href="#Python学习笔记" class="headerlink" title="Python学习笔记"></a>Python学习笔记</h1><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="1-1-Python语言简介"><a href="#1-1-Python语言简介" class="headerlink" title="1.1 Python语言简介"></a>1.1 Python语言简介</h3><p>python本意为大蟒蛇</p><p>Pyhton是解释性脚本语言；可移植性强，设计哲学是“优雅”、“简单”、“明确”，面向对象，可扩展性。</p><p>Python在线开发环境<a href="https://pythontutor.com/visualize.html#mode=edit">https://pythontutor.com/visualize.html#mode=edit</a></p><p>Python的使用有两种方式</p><ul><li>交互式</li><li>文件式</li></ul><h3 id="1-2-标识符和变量"><a href="#1-2-标识符和变量" class="headerlink" title="1.2 标识符和变量"></a>1.2 标识符和变量</h3><p>标识符：</p><ul><li>以数字、字母、下划线组成。在Python3中甚至可以用中文字符</li><li>不能以数字自开头</li><li>大小写敏感 ，Andy 和 andy 代表两个不同的变量</li></ul><p>常量与变量</p><ul><li><p>Python中的变量不仅可以改变值，类型也可以变化</p></li><li><p>Python是动态类型语言，变量的类型绑定延迟到了运行阶段，在Python中的变量可以不定义就使用</p></li><li><p>Python中变量名大小写敏感</p></li><li><p>Python中变量的类型可以使用type()函数查看类型</p></li><li><p>del()函数可以回收变量</p></li><li><p>Python中变量的赋值实际上是，建立变量与对象之间的指向关系</p></li><li><p>Python中属于[-5,256]的数属于<strong>小整数</strong>，存放在小整数对象池中，即使多次重新定义也不会在重新开辟新的空间，比较高效率；而非小整数或其他对象会重新开辟空间 </p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">1</span><br>b = <span class="hljs-number">1</span><br><span class="hljs-built_in">id</span>(a)<br><span class="hljs-built_in">id</span>(b)<br><span class="hljs-built_in">id</span>(<span class="hljs-number">1</span>)<br><span class="hljs-comment"># 上面三行代码的运行结果一样</span><br><span class="hljs-comment"># 变量 a 和 b 都指向了 1 这个对象</span><br><span class="hljs-comment"># 为 1 分配内存空间</span><br>a = <span class="hljs-number">1000</span><br>b = <span class="hljs-number">1000</span><br><span class="hljs-built_in">id</span>(a)<br><span class="hljs-built_in">id</span>(b)<br><span class="hljs-built_in">id</span>(<span class="hljs-number">1000</span>)<br><span class="hljs-comment"># 上面三行代码运行结果均不一样</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="1-3-输入函数和输出函数"><a href="#1-3-输入函数和输出函数" class="headerlink" title="1.3 输入函数和输出函数"></a>1.3 输入函数和输出函数</h3><blockquote><p>输入函数 input()</p></blockquote><ul><li><p>input()函数在Python中是一个内建函数，可以从键盘读入字符串</p></li><li><p>读入的是字符串，可以强制类型转换为其他类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-built_in">input</span>() <span class="hljs-comment"># 输入123</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a)) <span class="hljs-comment"># &lt;class &#x27;str&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(a) <span class="hljs-comment">#&#x27;123&#x27;</span><br><br>a = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>()) <span class="hljs-comment"># 输入123</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a)) <span class="hljs-comment"># &lt;class &#x27;int&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(a) <span class="hljs-comment"># 123</span><br></code></pre></td></tr></table></figure></li><li><p>读入多个字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a,b = <span class="hljs-built_in">input</span>().split() <span class="hljs-comment"># 输入12 23</span><br><span class="hljs-built_in">print</span>(a) <span class="hljs-comment"># &#x27;12&#x27;</span><br><span class="hljs-built_in">print</span>(b) <span class="hljs-comment"># &#x27;23&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>输入之前输出提示信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">i = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入一个整数：&quot;</span>)) <span class="hljs-comment"># 输出提示信息</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(i)) <span class="hljs-comment"># &lt;class &#x27;int&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(i) <span class="hljs-comment"># 123</span><br></code></pre></td></tr></table></figure></li></ul><blockquote><p>输出函数print()</p></blockquote><ul><li><p>可以输出常量和变量</p></li><li><p>print()函数输出默认换行，可以设置end参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    <span class="hljs-built_in">print</span>(i)<br><span class="hljs-comment"># 输出01234每个数字一行</span><br> <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    <span class="hljs-built_in">print</span>(i,end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-comment"># 输出01234 所有数字在同一行</span><br><span class="hljs-comment"># end参数可以让每次输出后增加一个分隔符</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><h5 id="2-1-Python的数据类型"><a href="#2-1-Python的数据类型" class="headerlink" title="2.1 Python的数据类型"></a>2.1 Python的数据类型</h5><ul><li><p>数字类型</p><ul><li><p>整型</p><ul><li>默认十进制，其他进制需要引导符号；二进制0B，八进制0O，十六进制0X</li><li>不会溢出</li><li>可正可负</li></ul></li><li><p>浮点型</p><ul><li><p>取值氛围和精度有限制</p></li><li><p>科学记数法：1.23e9  代表 1.23 *10^9</p></li><li><p>浮点数运算时可能会有误差</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span> == <span class="hljs-number">0.3</span>) <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span>) <span class="hljs-comment"># 0.30000000000000004</span><br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">round</span>(<span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span>,<span class="hljs-number">2</span>) == <span class="hljs-number">0.3</span>) <span class="hljs-comment"># True</span><br><span class="hljs-comment"># round()函数，第二个参数代表保留几位小数</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>复数</p><ul><li><p>与数学中的复数概念一致</p></li><li><p>由实部和虚部组成，虚部用 j 表示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a  = <span class="hljs-built_in">complex</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(a) <span class="hljs-comment"># (1+2j)</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h5 id="2-2-Python的算数运算符"><a href="#2-2-Python的算数运算符" class="headerlink" title="2.2 Python的算数运算符"></a>2.2 Python的算数运算符</h5><table><thead><tr><th>运算符</th><th>说明</th><th>示例</th><th>运算结果</th></tr></thead><tbody><tr><td>/</td><td>浮点数除法</td><td>100/5</td><td>20.0</td></tr><tr><td>//</td><td>整数除法（向左取整）</td><td>100//5</td><td>20</td></tr><tr><td>**</td><td>幂</td><td>2**3</td><td>8</td></tr></tbody></table><p>逻辑运算有短路原则</p><ul><li><p>字符串类型</p><ul><li><p>Python并没有单字符类型，即使只有一个字符，也被认为是一个字符串</p></li><li><p>字符串可以正向从零开始递增，也可以反向递减（最右边是 -1）</p></li><li><p>字符串运算符</p><table><thead><tr><th>运算符</th><th align="center">功能</th><th align="left">示例</th></tr></thead><tbody><tr><td>+</td><td align="center">连接字符串</td><td align="left">&gt;&gt;&gt;’Hello’ + ‘World’  –&gt; ‘HelloWorld’</td></tr><tr><td>*</td><td align="center">复制字符串</td><td align="left">&gt;&gt;&gt;’ab’ * 3. –&gt; ‘ababa’</td></tr></tbody></table></li><li><p>索引与切片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;abcdefgh&quot;</span><br><span class="hljs-built_in">print</span>(s[<span class="hljs-number">0</span>])<span class="hljs-comment"># &#x27;a&#x27;</span><br><span class="hljs-built_in">print</span>(s[-<span class="hljs-number">1</span>])<span class="hljs-comment"># &#x27;h&#x27;</span><br><span class="hljs-built_in">print</span>(s[<span class="hljs-number">1</span>:<span class="hljs-number">5</span>])<span class="hljs-comment"># &#x27;bcde&#x27;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>内置转换函数</p><p>![截屏2022-04-14 10.26.48](/Users/xufujie/Library/Application Support/typora-user-images/截屏2022-04-14 10.26.48.png)</p></li></ul><h5 id="2-3-Python语句"><a href="#2-3-Python语句" class="headerlink" title="2.3 Python语句"></a>2.3 Python语句</h5><ul><li><p>赋值语句</p><ul><li><p>序列赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">a,b = <span class="hljs-string">&quot;ab&quot;</span><br><span class="hljs-built_in">print</span>(a)    <span class="hljs-comment"># a</span><br><span class="hljs-built_in">print</span>(b)    <span class="hljs-comment"># b</span><br><br>x,y = <span class="hljs-number">4</span>,<span class="hljs-number">8</span><br><span class="hljs-built_in">print</span>(x)    <span class="hljs-comment"># 4</span><br><span class="hljs-built_in">print</span>(y)    <span class="hljs-comment"># 8</span><br><br><span class="hljs-comment">#swap</span><br>x,y = y,x<br><span class="hljs-built_in">print</span>(x)    <span class="hljs-comment"># 8</span><br><span class="hljs-built_in">print</span>(y)    <span class="hljs-comment"># 4</span><br><br><span class="hljs-comment"># 当左侧的变量个数 不等于 右侧的序列个数时</span><br>i,*j = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<span class="hljs-comment">#右边是一个列表，没有*号会报错</span><br><span class="hljs-built_in">print</span>(i)    <span class="hljs-comment"># 1</span><br><span class="hljs-built_in">print</span>(j)    <span class="hljs-comment"># [2, 3]</span><br><br>a=b=c=<span class="hljs-number">5</span><span class="hljs-comment">#a=5,b=5,c=5</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>分支语句：if 语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#Python 分支语句中的逻辑关系是通过缩进来实现的</span><br>i = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">if</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;偶数&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;奇数&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>循环语句：for 语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 输出结果1 2 3 4 占一行，遍历列表</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]:<br>    <span class="hljs-built_in">print</span>(i,end=<span class="hljs-string">&#x27; &#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li><p>range()函数：可以产生特定区间的自然数序列</p><p>![截屏2022-04-14 11.11.18](/Users/xufujie/Library/Application Support/typora-user-images/截屏2022-04-14 11.11.18.png)</p></li></ul></li></ul><p>​            </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>))<br><span class="hljs-built_in">print</span>(a)    <span class="hljs-comment"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><br>b = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>))<br><span class="hljs-built_in">print</span>(b)    <span class="hljs-comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><br>c = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">11</span>,<span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(c)    <span class="hljs-comment"># [2, 4, 6, 8, 10]</span><br><br>d = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,-<span class="hljs-number">10</span>,-<span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(d)    <span class="hljs-comment"># [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]</span><br></code></pre></td></tr></table></figure><h5 id="2-4-示例习题"><a href="#2-4-示例习题" class="headerlink" title="2.4 示例习题"></a>2.4 示例习题</h5><p>计算序列和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 计算1+2+...+n</span><br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())    <span class="hljs-comment"># 输入5</span><br>l = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>))<br>result = <span class="hljs-built_in">sum</span>(l)<br><span class="hljs-built_in">print</span>(result)   <span class="hljs-comment"># 输出15</span><br></code></pre></td></tr></table></figure><p>计算n的阶乘</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 计算n!</span><br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())    <span class="hljs-comment"># 输入5</span><br>l = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>))<br>result = <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> l:<br>    result *= i<br><span class="hljs-built_in">print</span>(result)   <span class="hljs-comment"># 120</span><br><br><br></code></pre></td></tr></table></figure><h4 id="2-5-Python的推导式"><a href="#2-5-Python的推导式" class="headerlink" title="2.5 Python的推导式"></a>2.5 Python的推导式</h4><p>推导式又称为解析式，是Python的一种独有特性。</p><p>推导式可以从一个数据序列去构建另一个数据序列。</p><p>一共包含三种推导式</p><ul><li>列表推导式<ul><li>提供了一种简明扼要的方式来创建列表</li><li>可以将循环和条件判断结合，避免过长代码，同时提高程序性能</li></ul></li><li>字典推导式</li><li>集合推导式</li></ul><h5 id="2-5-1-列表"><a href="#2-5-1-列表" class="headerlink" title="2.5.1 列表"></a>2.5.1 列表</h5><ul><li>列表是什么？</li></ul><p>![截屏2022-04-14 14.41.15](/Users/xufujie/Library/Application Support/typora-user-images/截屏2022-04-14 14.41.15.png)</p><ul><li>列表支持加法、乘法、比较、索引、切片操作等</li></ul><p>列表推导式演示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">n1 = [number*<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> number <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]]<br><span class="hljs-built_in">print</span>(n1)   <span class="hljs-comment"># [2, 4, 6, 8, 10]</span><br><br><span class="hljs-comment">#   带条件的列表推导式</span><br>n2 = [number <span class="hljs-keyword">for</span> number <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">11</span>) <span class="hljs-keyword">if</span> number%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(n2)   <span class="hljs-comment"># [1, 3, 5, 7, 9]</span><br></code></pre></td></tr></table></figure><p>列表推导式Demo</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#   求 1+1/2+...+1/20 之和</span><br>result = <span class="hljs-built_in">sum</span>([<span class="hljs-number">1</span>/number <span class="hljs-keyword">for</span> number <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">21</span>)])<br><span class="hljs-built_in">print</span>(result)   <span class="hljs-comment"># 3.597739657143682</span><br>result = <span class="hljs-built_in">round</span>(result,<span class="hljs-number">2</span>)    <span class="hljs-comment"># 保留两位小数</span><br><span class="hljs-built_in">print</span>(result)   <span class="hljs-comment"># 3.6</span><br><br><span class="hljs-comment">#  求 6+66+...+666...66 之和</span><br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>ret = <span class="hljs-built_in">sum</span>([<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;6&#x27;</span>*i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>)]) <span class="hljs-comment">#用int()将列表中全变为数字</span><br><span class="hljs-built_in">print</span>(ret)<br></code></pre></td></tr></table></figure><h5 id="2-6-格式化输出"><a href="#2-6-格式化输出" class="headerlink" title="2.6 格式化输出"></a>2.6 格式化输出</h5><blockquote><p>Format()函数</p></blockquote><p>![截屏2022-04-15 10.01.55](/Users/xufujie/Library/Application Support/typora-user-images/截屏2022-04-15 10.01.55.png)</p><p>上述例子中，要输出两个变量，所以format()函数中有两个参数</p><p>这两个变量在什么位置输出，以什么格式输出，都在前面的““中表达，其中{}用来占位</p><h5 id="2-7-课后题"><a href="#2-7-课后题" class="headerlink" title="2.7 课后题"></a>2.7 课后题</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 求交错序列前N项和</span><br><span class="hljs-comment"># 输入正整数N，输出序列和，结果保留三位小数</span><br><span class="hljs-comment"># 1 - 2/3 + 3/5 - 4/7 + 5/9 - 6/11 + ...</span><br><br><span class="hljs-comment">#循环实现</span><br>N = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>result = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,N+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">if</span>(i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>):<br>        result = result - i/(<span class="hljs-number">2</span>*i-<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">else</span>:<br>        result = result + i / (<span class="hljs-number">2</span>*i-<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;:.3f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(result))<br><br><br><span class="hljs-comment"># 列表实现</span><br>N = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>alist = [i/(i*<span class="hljs-number">2</span>-<span class="hljs-number">1</span>) <span class="hljs-keyword">if</span> i%<span class="hljs-number">2</span>==<span class="hljs-number">1</span> <span class="hljs-keyword">else</span> -i/(i*<span class="hljs-number">2</span>-<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,N+<span class="hljs-number">1</span>)]<br>result = <span class="hljs-built_in">sum</span>(alist)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;:.3f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(result))<br></code></pre></td></tr></table></figure><h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><h4 id="3-1-容器"><a href="#3-1-容器" class="headerlink" title="3.1 容器"></a>3.1 容器</h4><p>![截屏2022-04-15 11.05.09](/Users/xufujie/Library/Application Support/typora-user-images/截屏2022-04-15 11.05.09.png)</p><h5 id="3-1-1-Python中针对序列的操作"><a href="#3-1-1-Python中针对序列的操作" class="headerlink" title="3.1.1 Python中针对序列的操作"></a>3.1.1 Python中针对序列的操作</h5><ul><li><p>+</p></li><li><p>*</p></li><li><p>in / not in</p></li><li><p>[]</p></li></ul><h5 id="3-1-2-切片"><a href="#3-1-2-切片" class="headerlink" title="3.1.2 切片"></a>3.1.2 切片</h5><p>​    定义：从字符串或者列表这种序列容器当中取出其中的一段连续的操作。</p><p>​    示例：</p><p>​    从身份证号中提取生日</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 从身份证号中提取生日</span><br>sfh = <span class="hljs-built_in">input</span>()<br>sr = sfh[<span class="hljs-number">6</span>:<span class="hljs-number">14</span>]<span class="hljs-comment"># 切片，从6切到14，不包含14</span><br><span class="hljs-built_in">print</span>(sr)<br></code></pre></td></tr></table></figure><p>从温度中提取数字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#从开头取不包括最后一个字符的切片</span><br><br><span class="hljs-comment">#-1代表最后一个，0:-1 代表从开头到最后一个字符</span><br><span class="hljs-string">&#x27;26C&#x27;</span>[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>]<span class="hljs-comment"># &#x27;26&#x27;</span><br><span class="hljs-string">&#x27;6C&#x27;</span>[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>]<span class="hljs-comment"># &#x27;6&#x27;</span><br><br><span class="hljs-comment">#切片第一个参数省略，默认是从头开始</span><br><span class="hljs-string">&#x27;26C&#x27;</span>[:-<span class="hljs-number">1</span>]<span class="hljs-comment"># &#x27;26&#x27;</span><br><span class="hljs-comment">#切片第二个参数省略，默认是取到尾巴</span><br><span class="hljs-string">&#x27;ZheJiang&#x27;</span>[<span class="hljs-number">3</span>:]<span class="hljs-comment"># &#x27;Jiang&#x27;</span><br></code></pre></td></tr></table></figure><h5 id="3-1-3-字符串函数"><a href="#3-1-3-字符串函数" class="headerlink" title="3.1.3 字符串函数"></a>3.1.3 字符串函数</h5><p>所有字符串函数都不会去修改字符串本身，都只是产生新的字符串</p><blockquote><p>字符串前面的r可以防止转义</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = <span class="hljs-string">&#x27;i am \\ boy&#x27;</span><br><span class="hljs-built_in">print</span>(s1)   <span class="hljs-comment"># i am \ boy</span><br><br>s2 = <span class="hljs-string">r&#x27;i am \\ boy&#x27;</span><br><span class="hljs-built_in">print</span>(s2)   <span class="hljs-comment"># i am \\ boy</span><br></code></pre></td></tr></table></figure><blockquote><p>lower()</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&#x27;John Smith&#x27;</span><br><span class="hljs-built_in">print</span>(s.lower())<span class="hljs-comment"># &#x27;john smith&#x27;</span><br></code></pre></td></tr></table></figure><blockquote><p>find()</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&#x27;John Smith&#x27;</span><br><span class="hljs-built_in">print</span>(s.find(<span class="hljs-string">&#x27;hn&#x27;</span>)) <span class="hljs-comment"># 2</span><br><span class="hljs-built_in">print</span>(s.find(<span class="hljs-string">&#x27;aa&#x27;</span>)) <span class="hljs-comment"># -1</span><br><br><span class="hljs-comment">#第2个、第3个参数用来表示 从什么地方开始找，找到什么地方结束</span><br><span class="hljs-string">&#x27;Hello World!&#x27;</span>.find(<span class="hljs-string">&#x27;l&#x27;</span>)<span class="hljs-comment"># 2</span><br><span class="hljs-string">&#x27;Hello World!&#x27;</span>.find(<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-number">4</span>)<span class="hljs-comment"># 9 从第四个字符开始找‘l’</span><br></code></pre></td></tr></table></figure><blockquote><p>count()</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;Hello World!&#x27;</span>.count(<span class="hljs-string">&#x27;l&#x27;</span>)<span class="hljs-comment"># 3</span><br><span class="hljs-string">&#x27;Hello World!&#x27;</span>.count(<span class="hljs-string">&#x27;lo&#x27;</span>) <span class="hljs-comment"># 1</span><br></code></pre></td></tr></table></figure><blockquote><p>strip()</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27; Hello World &#x27;</span>.strip()<span class="hljs-comment"># 把两边空格都去掉</span><br><span class="hljs-comment"># &#x27;Hello World&#x27;</span><br><span class="hljs-comment"># 去掉右边空格：rstrip()</span><br><span class="hljs-comment"># 去掉左变空格：lstrip()</span><br></code></pre></td></tr></table></figure><blockquote><p>replace()</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27; Hello World &#x27;</span>.replace(<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-string">&#x27;--&#x27;</span>)<br><span class="hljs-comment"># &#x27;--Hello--World--&#x27;</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27; Hello World &#x27;</span>.replace(<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-comment"># &#x27;HelloWorld&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ajax概述</title>
    <link href="/2022/03/19/Ajax%E6%A6%82%E8%BF%B0/"/>
    <url>/2022/03/19/Ajax%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="1-1-Ajax是什么"><a href="#1-1-Ajax是什么" class="headerlink" title="1.1 Ajax是什么"></a>1.1 Ajax是什么</h2><p>Ajax即<strong>A</strong>synchronous <strong>J</strong>avascript <strong>A</strong>nd <strong>X</strong>ML（异步JavaScript和[XML]）</p><p>XML：XML 指可扩展标记语言，XML 被设计用来传输和存储数据。</p><h2 id="1-2-Ajax的特点"><a href="#1-2-Ajax的特点" class="headerlink" title="1.2 Ajax的特点"></a>1.2 Ajax的特点</h2><h3 id="1-2-1-Ajax的优点"><a href="#1-2-1-Ajax的优点" class="headerlink" title="1.2.1 Ajax的优点"></a>1.2.1 Ajax的优点</h3><ul><li>无需刷新页面与服务器端进行通信</li><li>允许你根据用户事件来更新部分页面内容</li></ul><h3 id="1-2-2-Ajax的缺点"><a href="#1-2-2-Ajax的缺点" class="headerlink" title="1.2.2 Ajax的缺点"></a>1.2.2 Ajax的缺点</h3><ul><li>没有浏览历史，不能回退</li><li>存在跨域问题（同源）</li><li>SEO（Search Engine Optimization）不友好，爬虫爬不到数据</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>路由</title>
    <link href="/2022/03/13/%E8%B7%AF%E7%94%B1/"/>
    <url>/2022/03/13/%E8%B7%AF%E7%94%B1/</url>
    
    <content type="html"><![CDATA[<h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><h3 id="一、路由概述"><a href="#一、路由概述" class="headerlink" title="一、路由概述"></a>一、路由概述</h3><p>一个Web应用应该有多个页面，通过路由，可以让应用在多个页面间跳转</p><p>（严格的说Vue是单页面应用，所以跳转的不是其他页面，而是其他组件）。</p><p>本章将会讲解路由的常用功能，关于更多的路由介绍，可以直接到Vue路由官网查阅，<a href="">官方文档地址</a></p><h3 id="二、创建包括路由模块的Vue项目"><a href="#二、创建包括路由模块的Vue项目" class="headerlink" title="二、创建包括路由模块的Vue项目"></a>二、创建包括路由模块的Vue项目</h3><p>首先使用下面命令创建一个带路由的项目:</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">vue create RouterProject<br></code></pre></td></tr></table></figure><p>├─src<br>│   └─assets<br>│   │   └─logo.png<br>│   └─components<br>│   │   └─HelloWorld.vue<br>│   views<br>│   │   └─About.vue<br>│   │   └─Home.vue<br>│   └─App.vue<br>│   └─main.js<br>│   router.js</p><ul><li>views目录包括两个视图组件，用来展示两个菜单跳转的不同页面</li><li>router.js文件是路由配置文件，我们可以在其中设置更多的路由跳转。</li></ul><h3 id="三、配置router-js文件"><a href="#三、配置router-js文件" class="headerlink" title="三、配置router.js文件"></a>三、配置router.js文件</h3><h4 id="跳转页面"><a href="#跳转页面" class="headerlink" title="跳转页面"></a>跳转页面</h4><p>单页面跳转使用router-link标签中的to属性进行跳转：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;router-link to=<span class="hljs-string">&quot;/&quot;</span> &gt;  &lt;/router-link&gt;<br></code></pre></td></tr></table></figure><p>总共在views文件中添加两个子路由，分别命名login.vue（登录）和video.vue（视频），然后在router文件夹中的index.js配置两个路由文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> xzblog <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/xzblog&#x27;</span><br><span class="hljs-keyword">import</span> xzvido <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/xzvido&#x27;</span><br><br><span class="hljs-attr">routes</span>: [<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;login&quot;</span><br>      <span class="hljs-attr">component</span>: login<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/video&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;video&#x27;</span>,<br>      <span class="hljs-attr">component</span>: video<br>    &#125;,<br>]<br></code></pre></td></tr></table></figure><h3 id="四、编程式导航"><a href="#四、编程式导航" class="headerlink" title="四、编程式导航"></a>四、编程式导航</h3><p>除了使用 <code>&lt;router-link&gt;</code> 创建 a 标签来定义导航链接，我们还可以借助 router 的实例方法，通过编写代码来实现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">router.push(...)<br></code></pre></td></tr></table></figure><p>当你点击 <code>&lt;router-link&gt;</code> 时，这个方法会在内部调用，所以说，点击 <router-link :to="..."> 等同于调用 router.push(…)。</p><h3 id="五、导航守卫"><a href="#五、导航守卫" class="headerlink" title="五、导航守卫"></a>五、导航守卫</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123; ... &#125;)<br>router.beforeEach(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="课后Demo"><a href="#课后Demo" class="headerlink" title="课后Demo"></a>课后Demo</h3><p>实现用户登录功能，未登录时点击标签网页不发生跳转，一直在登录页面</p><p>登录成功后，显示欢迎字样，可以访问所有页面</p><p>文件地址：/Users/xufujie/Desktop/前端基础/Vue基础/VP10\ 路由/template</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>人工智能科普</title>
    <link href="/2022/03/13/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%A7%91%E6%99%AE/"/>
    <url>/2022/03/13/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%A7%91%E6%99%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="人工智能科普（一）"><a href="#人工智能科普（一）" class="headerlink" title="人工智能科普（一）"></a>人工智能科普（一）</h1><p>视频链接：<a href="https://www.ixigua.com/7009235244809191966?id=6937289753200951844&amp;logTag=12816ac387dcdfdf3afd">https://www.ixigua.com/7009235244809191966?id=6937289753200951844&amp;logTag=12816ac387dcdfdf3afd</a></p><h2 id="一、人工智能发展史"><a href="#一、人工智能发展史" class="headerlink" title="一、人工智能发展史"></a>一、人工智能发展史</h2><p>1、1950年，英国，图灵。提出了图灵测试方法</p><p>2、1956年。马文明斯基、约翰麦卡锡、香农召开了 达特茅斯会议，发明了人工智能（artificial intelligence）</p><p>3、1997年，IBM深蓝计算机，下象棋战胜了冠军</p><p>辛顿 反向传播算法（BP）、纽约大学杨力昆 卷机神经网络（CNN）、加拿大本吉奥。</p><p>反向传播算法（BP）：先调第n隐层，。。。最后调第一隐层。算法复杂度低。</p><p>功能：实时翻译、文章翻译</p><h2 id="二、梯度下降算法"><a href="#二、梯度下降算法" class="headerlink" title="二、梯度下降算法"></a>二、梯度下降算法</h2><p>ai最核心的算法，可以处理分类问题和回归问题。</p><p>误差综合最小：损失函数</p><p>梯度下降算法用来优化参数，如果参数很多的话，最小二乘法太过于复杂，所以又了梯度下降算法。</p><p>优化参数w的方法：将w作为横坐标，损失函数作为纵坐标。我们想找到一个w使损失函数最小，这时候就需要用到梯度下降算法。首先求一个函数，偏 j 比偏 w （偏导数），进行迭代。可以找到一个更好的w2，继续迭代找w3。。。一步一步，一次次计算，就能找到最好的w。偏导数约等于0时，就找到了最优解。</p><h2 id="三、神经网络"><a href="#三、神经网络" class="headerlink" title="三、神经网络"></a>三、神经网络</h2><p>M–P模型：每一个神经元，都是多输入，单输出。</p><p>激活函数：sigmoid函数。接近零，不像下游输出，接近一，向下游输出。</p><p>神经网络怎么识别图像？图像在计算机看来其实就是一堆数，通过训练，找到一大堆参数，判断这一堆数是不是代表X。</p><h2 id="四、人工智能的框架"><a href="#四、人工智能的框架" class="headerlink" title="四、人工智能的框架"></a>四、人工智能的框架</h2><p>1、谷歌的TensoFlow</p><p>2、脸书的Pytorch</p><p>3、华为的MindSpore</p><p>​    自动并行计算；二阶优化，加速寻找最低点；全方位协同，手机 汽车都能用，不需要传到云计算中心再返回；信息安全性高，数据脱敏</p><hr><h2 id="五、计算机识别图像，CNN"><a href="#五、计算机识别图像，CNN" class="headerlink" title="五、计算机识别图像，CNN"></a>五、计算机识别图像，CNN</h2><p>杨立昆，CNN</p><h4 id="步骤一、卷积："><a href="#步骤一、卷积：" class="headerlink" title="步骤一、卷积："></a>步骤一、卷积：</h4><p> 用数学方法提取图像特征。</p><p>提取特征：用卷积核对图像做卷积运算。</p><p>卷积核：也是一个矩阵，3<em>3/5</em>5</p><p>卷积运算：把卷积核放到图像上，对应元素相乘再相加，再把结果放到正中心点，图像所有地方都走遍，就构成特征图。</p><p>特征图上数字越大，说明越满足特征。</p><h4 id="步骤二、池化，激活"><a href="#步骤二、池化，激活" class="headerlink" title="步骤二、池化，激活"></a>步骤二、池化，激活</h4><p>池化：把特征图中有特征的放大，没特征的忽略</p><p>激活：sigmoid函数</p><p>卷积核会自动调整，就像训练参数。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>人工智能</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>知识储备.md</title>
    <link href="/2022/03/11/%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87/"/>
    <url>/2022/03/11/%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87/</url>
    
    <content type="html"><![CDATA[<h3 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h3><p>传统的javaweb开发方式中，无论是采用jsp+servelt或者是采用Spring框架。都有一个问题，就是怎么把后端的数据，添加到前端页面中，并渲染到DOM中显示给用户。前端写好静态页面，再由后端人员把静态页面转成jsp。一旦这时候出现了什么问题，两个人的交流成本很大。而且，前端的代码和后端的代码，就是直接混合在一起，耦合度太高，开发效率低，维护成本高。</p><p>采用前后端分离的方式进行开发，就可以解决这一问题。前端只需要独立编写客户端代码，后端也只需要独立编写服务端代码，提供数据接口。前端通过ajax请求来访问后端数据接口，将model展示到view中即可。前后端开发者，只需要提前约定好接口文档（URL，参数，数据类型，方法类型…）真正实现了前后端应用层解耦合</p><p>servelt通过el表达式解析到jsp中，再与jsp中不变的数据进行拼接，返回</p><p>前端–&gt;静态页面–&gt;后端–&gt;jsp</p><p>前端应用通过ajax请求去访问后端暴露的接口，后端返回json格式的数据</p><h3 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h3><p>Spring的两个重要特性：</p><p>​    1、IOC：控制反转——是一种设计思想，不需要在对象里，new一个别的对象。因为这样会增加对象之间的依赖。有了IOC之后，只需要将设计好的对象，交给第三方IOC容器去管控。我们只需要通过配置文件，来方便的创建，管理对象之间的依赖关系。</p><p>​    2、AOP：面向切面编程。</p><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><p>Vue的核心思想：</p><p>1、数据驱动</p><p>​    传统的开发方式中，当数据发生改变时，无论是通过ajax从后端获取来数据，还是通过用户交互改变数据，都需要需要手动触发DOM，先找到元素，再append等一系列操作，又繁琐又容易出错。而使用Vue我们就不需要手动操作DOM了，只需要关心数据，数据驱动DOM变化，DOM是数据的一种自然映射。</p><p>2、组件化</p><p>​    我认为组件化，就是将一堆的HTML标签封装在一起，因为它是一种抽象，允许我们使用小型、独立和通常可复用的组件构建大型应用。</p><p>​    传统的前端和后端发生交互时，页面整个刷新，开销大，用户体验差。前端通过ajax访问后端的 RESTful 接口做通讯，异步刷新页面的某个区块，通过这种方式，来提高效率，优化体验。</p><p>​    MVVM：Model、View、ViewModel。Model代表的是数据，对应到前端就是JavaScript对象；View对应的是视图，对应到浏览器就是DOM；他们两个通过ViewModel做通讯，ViewModel实现了一个Observer观察者，当数据发生变化时，ViewModel可以观察到，并把他反应到DOM上，也就是通知对应的需要改变的DOM结点自动更新；当用户操作DOM时，ViewModel也可以观察到，并把相应的数据发生改变，这样就实现了v-bind双向绑定。</p><p>局部刷新，懒加载</p><hr><h4 id="Get和Post有什么区别？"><a href="#Get和Post有什么区别？" class="headerlink" title="Get和Post有什么区别？"></a>Get和Post有什么区别？</h4><h4 id="Tcp和Udp有什么区别？"><a href="#Tcp和Udp有什么区别？" class="headerlink" title="Tcp和Udp有什么区别？"></a>Tcp和Udp有什么区别？</h4><h4 id="cookie和session有什么区别？"><a href="#cookie和session有什么区别？" class="headerlink" title="cookie和session有什么区别？"></a>cookie和session有什么区别？</h4><h4 id="元素居中有那些方法"><a href="#元素居中有那些方法" class="headerlink" title="元素居中有那些方法"></a>元素居中有那些方法</h4><hr><h4 id="TCP和UDP有什么区别？"><a href="#TCP和UDP有什么区别？" class="headerlink" title="TCP和UDP有什么区别？"></a>TCP和UDP有什么区别？</h4><p>首先，传输控制协议TCP和用户数据报协议UDP都是传输层的协议。</p><p>UDP向上层提供无连接不可靠的服务。而TCP向上层提供面向连接的可靠的数据传输服务。所谓UDP的无连接就是指在发送数据之前不需要建立连接，而TCP发送数据前需要先使用“三次握手”建立连接，发送完成后使用“四次挥手”释放连接。也正是因为如此，TCP只可提供点对点、一对一的服务，而UDP是支持单播、多播、广播。</p><p>其次，不可靠是指UDP使用尽最大努力交付，应用于一些对实时性要求比较高的场合，如IP电话，视频会议等。TCP向上提供可靠交付的服务，保证数据无差错、不重复、不丢失、不失序。可以用于文件传输。也正因为如此，UDP首部开销小，只有8个字节。TCP首部开销大，需要20～60个字节。</p><p>最后，UDP是面向报文的。UDP对应用层交下来的报文，既不合并也不拆分，保留这些报文边界，原封不动的发送；TCP是面向字节4流的，不保证收到的数据块和发出的数据块具有对应的大小关系，而是会自动的进行拆分跟合并，接收方必须有能力识别收到的字节流，把它还原成有意义的应用层数据。</p><h4 id="HTTP和HTTPS有什么区别？"><a href="#HTTP和HTTPS有什么区别？" class="headerlink" title="HTTP和HTTPS有什么区别？"></a>HTTP和HTTPS有什么区别？</h4><p>首先这两个都是应用层协议</p><p>HTTP是无连接、无状态的</p><p>HTTP：HyperText Transfer Protocol 超文本传输协议。是用于在互联网上查看网页的协议。在标准HTTP中，所有信息都以明文发送，浏览器和服务器之间交换的所有信息都通过公共的互联网进行传输，所以是不安全的。也正因为如此，我们有了HTTPS协议，多的这个S就是 Secure 。HTTPS 是通过SSL协议来保护数据的，SSL 是 SecureSocket Layer 安全层。SSL 的基本工作原理是，网页浏览器会要求网站确认自己的身份，服务器会向浏览器发送安全证书。HTTPS会加密有HTTP发送的数据，确保了计算机和服务器之间传送的数据都是安全的。通过使用加密算法，来打乱发送的数据。即使被黑客窃取了，他得到的也是一堆无意义的数据，也无法从这些加密数据中破解出有价值的信息。就像我们平常在使用浏览器时，地址栏中就会用红色不安全或者绿色的小锁来提示你是否安全。</p><h4 id="SRAM和DRAM有什么区别？"><a href="#SRAM和DRAM有什么区别？" class="headerlink" title="SRAM和DRAM有什么区别？"></a>SRAM和DRAM有什么区别？</h4><p>SRAM和DRAM都属于RAM，随机读写存储器。能读能写。断电时数据丢失。</p><p>SRAM是用双稳态触发器来记忆信息的，所以上面的数据是稳定的；但SRAM从半导体制造工艺上来看，集成度低，容量不容易扩大，价格贵，速度很快，常用来做cache。</p><p>DRAM是由电容做的，电容存在泄漏问题，需要定时刷新保证数据的正确。DRAM比SRAM要慢， 但造价更低， 容量也比SRAM大得多， 在计算机中主要用来做内存。</p><h4 id="同步通信与异步通信的区别？"><a href="#同步通信与异步通信的区别？" class="headerlink" title="同步通信与异步通信的区别？"></a>同步通信与异步通信的区别？</h4><p>同步通信：通信双方按照相同的时钟频率，在同样的节拍下收发数据。不需要发送数据分隔信息。传送数据的同时，还需要传送时钟信号，来保证有相同的时钟频率。</p><p>异步通信：发送和接收的双方必须约定相同的帧格式，否则会造成传输错误。在异步通信方式中，发送方只发送数据帧，不传输时钟</p><h4 id="Hadoop简介"><a href="#Hadoop简介" class="headerlink" title="Hadoop简介"></a>Hadoop简介</h4><p>Hadoop两大核心：分布式文件系统 HDFS + 分布式并行编程框架 MapReduce</p><p>解决了大数据最关键的两个问题，一个是怎么实现海量数据的分布式存储问题，一个是怎么实现海量数据分布式处理。</p><p>HDFS 解决了怎么用成百上千台服务器存储几十T，上百T海量数据。MapReduce解决怎么用几千台服务器完成一个任务的并行式处理。</p><p>Spark：功能类似于MapReduce，但他是基于内存的。而MapReduce是基于磁盘的。</p><p>Hadoop特性：</p><p>​    1、可靠性：Hadoop采用冗余副本机制，某一部分机器发生故障，剩余机器可以继续提供服务。</p><p>​    2、高效行：因为是一个集群来做运算，成百上千台服务器一起算，可以高效的处理海量数据。</p><p>​    3、可扩展性：在一个Hadoop集群里，你可以十个结点也可以二十个结点，可以不断的向集群中增加机器。</p><p>​    4、成本低：可以使用普通的PC机来构成一个集群。</p><h4 id="说一下你的《博客》这个项目"><a href="#说一下你的《博客》这个项目" class="headerlink" title="说一下你的《博客》这个项目"></a>说一下你的《博客》这个项目</h4><h4 id="说说你的毕业设计"><a href="#说说你的毕业设计" class="headerlink" title="说说你的毕业设计"></a>说说你的毕业设计</h4><p>因为现在网课很普遍，所以我的毕业设计做的是《学生在线考试系统》，是一个前后端分离的项目。前端用的框架是Vue，后端用的框架是SpringBoot。主要功能有：学生可以参加考试，查看自己所选课程的考试安排，查分之类的；教师可以发布考试，查看某个班的成绩，系统可以对学生的成绩进行一个数据可视化。最核心的功能还是组卷，教师可以手工组卷，也可以随机组卷。随机组卷的实现方法</p><h4 id="说一下对前后端分离的理解"><a href="#说一下对前后端分离的理解" class="headerlink" title="说一下对前后端分离的理解"></a>说一下对前后端分离的理解</h4><h4 id="说一下对SpringBoot的理解"><a href="#说一下对SpringBoot的理解" class="headerlink" title="说一下对SpringBoot的理解"></a>说一下对SpringBoot的理解</h4><h4 id="说一下对Vue的理解"><a href="#说一下对Vue的理解" class="headerlink" title="说一下对Vue的理解"></a>说一下对Vue的理解</h4><h4 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h4><p>人工智能最主流的方法是机器学习，机器学习里的一类技术，深度学习是人工智能方向如此火热的原因。这里面最重要的两个问题是如何对问题进行<strong>建模</strong>，和如何采集数据来确定模型中的<strong>参数</strong>。建模需要线性代数和统计，定参数就需要计算机编程。人工智能既需要数学工具建模，也需要用计算机编程来求解。</p><p>机器学习：是不使用显式编程的AI子集。但需要人类预先定义学习特征。分类问题，对目标进行有限的分类（猫、狗）、回归问题–结果是一个连续数字，例如房屋价格，提供训练集，机器调整参数，给出新房子的大致价格</p><p>深度学习是机器学习的子集。理论上不需要人类定义特征。受人脑神经元启发， 创建一个人工神经网络，当这个网络有多层时，就把它称作“深度学习”。</p><p>因此，用深度学习，我们只需要给机器大量的猫、狗的训练集，而不需要人类定义出猫和狗的特征，让机器自己发现猫和狗的区别，并训练机器自己区分猫和狗。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>考研</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flex布局</title>
    <link href="/2022/02/28/Flex%E5%B8%83%E5%B1%80/"/>
    <url>/2022/02/28/Flex%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="第15节：flex布局"><a href="#第15节：flex布局" class="headerlink" title="第15节：flex布局"></a>第15节：flex布局</h1><h3 id="一、flex布局概述"><a href="#一、flex布局概述" class="headerlink" title="一、flex布局概述"></a>一、flex布局概述</h3><p>此前我们制作的所有网页都是基于盒子模型和浮动布局完成的，本节我们一起学习弹性布局（或者叫弹性盒子布局），这是一种更先进的布局方式，可以让网页布局更简洁，更易于维护。</p><p>本节会针对flex布局的常用属性，讲解如何将flex布局应用到实际项目中。</p><h3 id="二、flex容器"><a href="#二、flex容器" class="headerlink" title="二、flex容器"></a>二、flex容器</h3><p>将一个元素设置如下属性</p><figure class="highlight css"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span>&#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>&#125;<br></code></pre></td></tr></table></figure><p>此容器会变成一个flex容器（flex container），容器内部的元素被称为flex项目（flex item），在这个容器内部浮动会失效，通过设置flex容器的css样式，可以改变内部项目的布局方式。</p><p>我们先来了解一些flex布局的基本概念，示例图如下所示</p><p><img src="../images/0120_img0.png" alt="Flex布局的基本概念"></p><p>一个flex容器默认存在两个轴，横向的主轴（main轴）和纵向的交叉轴（cross轴）。默认情况下flex项目按照main轴排列，通过设置，可以让项目按照cross轴排列，示例代码如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span>&#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>&#125;<br><span class="hljs-selector-class">.box</span>&#123;<br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid red;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过上面的案例，大家可以看到，默认情况下flex容器内部的元素是按照主轴排列的，并且块元素不会独立成行。</p><h4 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h4><p>通过flex-direction属性，可以设置flex容器按主轴或是交叉轴排列。</p><ul><li>flex-direction:row;默认值，项目按主轴排列，高度为容器高度。</li><li>flex-direction:column;项目按交叉轴排列，长度为容器长度。</li></ul><p>示例代码如下所示：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span>&#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-comment">/* flex-direction: column; */</span><br>    <span class="hljs-attribute">flex-direction</span>: row;<br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#00f</span>;<br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">200px</span>;<br>&#125;<br><span class="hljs-selector-class">.box</span>&#123;<br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid red;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里大家可以直观地看到，让flex项目按照主轴排列，此功能可以完全取代浮动布局，而且不必考虑浮动元素脱离文档流的种种弊端。如果不考虑浏览器兼容问题，那么flex布局大部分情况都可以很好地替代浮动布局。</p><h4 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h4><p>justify-content属性可以控制flex项目在容器中的水平排列方式，示例代码如下所示</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span>&#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#00f</span>;<br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">200px</span>;<br>    <span class="hljs-comment">/* flex项目按水平排列 */</span><br>    <span class="hljs-attribute">justify-content</span>:center;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>justify-content:flex-start;flex项目在主轴开始位置展示</li><li>justify-content:flex-end;flex项目在主轴结束位置展示</li><li>justify-content:flex-center;flex项目在主轴居中展示</li></ul><p>此前我们将一个元素居中显示，通常将设置元素设置为固定宽度，然后为其设置属性margin：0 auto;对于宽度不固定的元素，我们只能使用一些奇淫技巧让其居中。</p><p>现在有了flex布局，我们可以很轻易的让一个或多个不定宽度的元素居中。</p><h4 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h4><p>align-items属性可以控制flex项目在容器中的垂直排列方式，示例代码如下所示</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span>&#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#00f</span>;<br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">justify-content</span>: center;<br>    <span class="hljs-attribute">align-items</span>: center;<br>&#125;<br><span class="hljs-selector-class">.box</span>&#123;<br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#f00</span>;<br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">50px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>align-items:flex-start;flex项目在交叉轴开始位置展示</li><li>align-items:flex-end;flex项目在交叉轴结束位置展示</li><li>align-items:flex-center;flex项目在交叉轴居中展示</li></ul><h3 id="三、flex项目"><a href="#三、flex项目" class="headerlink" title="三、flex项目"></a>三、flex项目</h3><h4 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box item&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span>&#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#00f</span>;<br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">justify-content</span>: center;<br>    <span class="hljs-attribute">align-items</span>: center;<br>&#125;<br><span class="hljs-selector-class">.box</span>&#123;<br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#f00</span>;<br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">50px</span>;<br>&#125;<br><span class="hljs-selector-class">.item</span>&#123;<br>    <span class="hljs-attribute">align-self</span>: flex-start;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box item1&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box item2&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box item3&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span>&#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#00f</span>;<br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">justify-content</span>: center;<br>    <span class="hljs-attribute">align-items</span>: center;<br>&#125;<br><span class="hljs-selector-class">.box</span>&#123;<br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#f00</span>;<br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">50px</span>;<br>&#125;<br><span class="hljs-selector-class">.item1</span>&#123;<br>    <span class="hljs-attribute">flex</span>:<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-selector-class">.item2</span>&#123;<br>    <span class="hljs-attribute">flex</span>:<span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-selector-class">.item3</span>&#123;<br>    <span class="hljs-attribute">flex</span>:<span class="hljs-number">3</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>考研复试</title>
    <link href="/2022/02/25/%E8%80%83%E7%A0%94%E5%A4%8D%E8%AF%95/"/>
    <url>/2022/02/25/%E8%80%83%E7%A0%94%E5%A4%8D%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="英文面试"><a href="#英文面试" class="headerlink" title="英文面试"></a>英文面试</h1><h2 id="常见问题及答案"><a href="#常见问题及答案" class="headerlink" title="常见问题及答案"></a>常见问题及答案</h2><p>前两个答案范读：<a href="https://www.bilibili.com/video/BV15A411u7Du?spm_id_from=333.999.0.0">https://www.bilibili.com/video/BV15A411u7Du?spm_id_from=333.999.0.0</a> 评论区找时间戳</p><blockquote><p><strong>why do you want to go to graduate school instead of finding a job?</strong></p></blockquote><p>​    I think with three more years of graduate education,I will be better prepared to work in this field.Because based on my research and talking with many people who work in the industry,having a graduate degree is critical to further your career in internet industry.And druing my graduate study,I don’t plan on only doing academic studies. I also would like to take on internships and to further expose myself to the real world so that I can better put what I learning into practice.</p><blockquote><p><strong>Why did you choose our university?</strong></p></blockquote><p>​    I think the university has excellent resources,both inside and outside of the classroom.Inside the classroom,there are excellent faculty and staff members,particularly many professors in the field of who are renowned experts on the national level .And outside the classroom,the university has many alumni who work in the internet industry.And there are many events in the school which connect the alumni With current students .These two points deeply attracted me, so I chose our university.</p><blockquote><p><strong>Introduce your hometown.</strong></p></blockquote><p>​    Shijiazhuang is the capital of HeBei Provincece,a beautiful combination of antiquity and modernity. China’s oldest stone segmental arch bridge, the Zhaozhou Bridge, has spanned the Jiao River for 1,400 years. As the world’s first stone segmental arch bridge , it predates other bridges of its type throughout the world by 800 years.Shijiazhuang City is “National Advanced City of Science and Education”, with strong technical force.Meanwhile as “Chinese Medicine Capital”, its overall strength of Medicine industry ranks first in China. I love my hometown. Welcome to Shijiazhuang.</p><blockquote><p><strong>Introduce your family</strong></p></blockquote><p>​    The person I admire most is my father. He is a kind, upright and hard-working man. He always works diligently and contributes himself to our family. What I admire most about him is his emphasis on details. he is always very prudent about his work and seldom makes mistakes. I often see him checking files carefully even if it’s late at night, which motivates me to learn from him. In my future study and life, I will always remind myself that I should be detail-oriented, treat my study seriously as my father do to his work.</p><blockquote><p><strong>Introduce your undergraduate school</strong></p></blockquote><p>​    I am grateful to my undergraduate school. Although it is not very famous, the professors are responsible, and try their best to impart their knowledge to us. I met many good friends who grew up with me. If I am fortunate enough to be admitted, I hope to continue to make progress with more outstanding professors and classmates.</p><blockquote><p><strong>Tell me about your attitude towards English</strong></p></blockquote><blockquote><p><strong>How much do you know about our school and major?</strong></p></blockquote><p>​    I think the university has excellent resources,both inside and outside of the classroom.Inside the classroom,there are excellent faculty and staff members,particularly many professors in the field of who are renowned experts on the national level .And outside the classroom,the university has many alumni who work in the internet industry.And there are many events in the school which connect the alumni With current students .These two points deeply attracted me, so I chose our university.</p><p>优点范读:<a href="https://www.bilibili.com/video/BV1o541177sY?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1o541177sY?spm_id_from=333.337.search-card.all.click</a> 01:20</p><p>缺点范读：<a href="https://www.bilibili.com/video/BV1BS4y1T7DG/?spm_id_from=333.788.recommend_more_video.0">https://www.bilibili.com/video/BV1BS4y1T7DG/?spm_id_from=333.788.recommend_more_video.0</a></p><blockquote><p><strong>Talk about your strengths and weaknesses</strong></p></blockquote><p>​    I feel that my most valuable strength is that I am self-motivated.Growing up,I never needed to be forced to study.My curiosity and sense of responsibility provide constant drive.And thanks to parent and teachers who believe in me,I had the chance to choose my schools and major all along.Besides,I’m always looking for opportunities to better myself.It is just natural for me to make efforts to go for what I aspire for.And I have come to realize it is a desired capability.I am indeed proud of myself for it.</p><p>​    My biggest weakness is that I care too much about others’ feelings and I fear to speak my mind.for instance,if someone say sth about me,I may read too much into his remarks and then doubt whether I was to blame.But now,I am trying to improve my communication skills and learn how to express my opinions appropriately .Cause I know communication minght be the key to problems.</p><hr><h2 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h2><p>尊敬的各位老师，大家好：</p><p>​    我叫徐富杰。非常荣幸有机会参加咱们西安邮电大学的复试。可能您会看到我的教 育经历和其他同学有一些不一样，是的，我是专接本的考生。在2020年河北省专接本 考试中，我以专业排名全省第三的成绩，考入了华北理工大学。专业课考试科目是微 机原理及接口技术含汇编语言。</p><p>​    专科的学习背景呢，是我的一个标签，一段经历，甚至可以说是一种优势。正是因为我从专科升到本科，我更明白什么是长期而稳定的努力，安定而缓慢的成长;更清楚的知道环境对人的重要性;同时也更加渴望一个更高的学历，更高的平台。我相信，我能从一个相对较低的起点，到现在能够坐到各位导师面前参加复试，以后通过自己到努力也会登上一个更高更大的舞台;我相信实力加努力加上不断的学习，一定能够使自己成为一名合格的西邮人，也衷心的希望能够得到各位老师能够承认和信任。谢谢大家。</p><hr><h3 id="英文自我介绍"><a href="#英文自我介绍" class="headerlink" title="英文自我介绍"></a>英文自我介绍</h3><p>Dear committee members，</p><p>​        Good Morning/ Afternoon, I am XuFujie. I am excited that I have this opportunity to study on such a great academic platform and communicate with so many outstanding professors and peers. Compared with most other candidates, maybe I have a different study background. First, I studied in a college, and after three years of hard work, I successfully enrolled in the North China University of Science and Technology with an excellent grade. In the professional examination, the Microcomputer principle and Interface Technology, I ranked 3rd place in Hebei Province. This unique experience taught me how important the study environment is and how to pursue my long-term goals even in a difficult situation. </p><p>​        Later, in the university stage, I focused on computer science technology and gradually realized that I should learn more in a better environment to build the systematic structure of computer science. Thus, I prepared for the Graduate Enrollment Examination. For future studies, I hope to explore more unknowns in the area of Natural Language Processing and Artificial Intelligence. </p><p>​        To sum up, I believe Xi’an University of Posts &amp; Telecommunications is the best choice for me to achieve my further academic pursuit. And with my solid basis and great interests in computer science, my special educational experience, and my determination for further study, I believe I will be a qualified candidate at your university. Thanks for your time.</p><h2 id="专业问题备用"><a href="#专业问题备用" class="headerlink" title="专业问题备用"></a>专业问题备用</h2><h3 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h3><p>首先，跨域问题是前端的错误，是浏览器的一种保护机制。浏览器有同源策略。后端接受到请求了，也返回相应结果了，但浏览器拦截了</p>]]></content>
    
    
    <categories>
      
      <category>考研</category>
      
    </categories>
    
    
    <tags>
      
      <tag>考研</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue概述</title>
    <link href="/2022/02/22/Vue%E6%A6%82%E8%BF%B0/"/>
    <url>/2022/02/22/Vue%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="安装和引入Vue-js"><a href="#安装和引入Vue-js" class="headerlink" title="安装和引入Vue.js"></a>安装和引入Vue.js</h1><h4 id="使用vue还是jQuery"><a href="#使用vue还是jQuery" class="headerlink" title="使用vue还是jQuery"></a>使用vue还是jQuery</h4><p>jQuery仍然有自己的优势，制作一些相对简单的网站，或者是网站的部分活动页面，使用jQuery仍然可以提升开发效率。但是面对稍微具备规模的web应用，vue绝对是更好的选择。</p><h3 id="一、第一个Vue项目"><a href="#一、第一个Vue项目" class="headerlink" title="一、第一个Vue项目"></a>一、第一个Vue项目</h3><p>有两种方法可以在自己的项目中引入Vue：</p><ul><li>第一种是像引入jQuery一样，引入Vue.js文件。</li><li>第二种是使用Node环境，构建基于Vue的web项目。</li></ul><p>在真实的项目开发中，都会使用第二种开发方式，本节我们先以第一种-引入Vue.js文件方式起步。</p><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        &#123;&#123;message&#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript">                <span class="hljs-attr">message</span>:<span class="hljs-string">&quot;hello world&quot;</span></span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;).$mount(<span class="hljs-string">&quot;#app&quot;</span>)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们再来看一下上面的代码，它包含了一个vue程序最基本的结构：</p><p>首先，我们在html中定义了一个id为app的容器，然后我们在js创建一个Vue的实例，通过el属性指定这个容器，从而实现让js接管html.</p><p>每个 Vue 应用都是通过用 Vue 函数创建一个新的 Vue 实例开始的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-comment">// 选项</span><br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>在构造函数Vue中，我们需要传入一个【选项对象】来进一步描述vue实例的行为。</li><li>$mount方法，将Vue挂载到html。</li><li>el属性，作用于$mount相同。</li><li>data属性，在Vue的实例之下添加属性。</li><li><code>&#123;&#123;&#125;&#125;</code>可以输入一个表达式，也可以直接获取Vue实例的属性。</li></ul><h3 id="二、绑定属性"><a href="#二、绑定属性" class="headerlink" title="二、绑定属性"></a>二、绑定属性</h3><p>上面的例子中，我们将一个data中的message属性通过双花括号显示在文本节点之中，除此之外，我们还可以将数据绑定成为一个html属性，示例代码如下所示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-bind:title</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span>鼠标停留在这个H1标签上，可以看到title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span>鼠标停留在这个H1标签上，可以看到title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../script/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript">                <span class="hljs-attr">message</span>:<span class="hljs-string">&quot;hello world&quot;</span></span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;).$mount(<span class="hljs-string">&quot;#app&quot;</span>)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用【v-bind:属性名】和【:属性名】两种方式都可以绑定属性，在实际开发中，我们通常使用简写。</p><h3 id="三、绑定事件"><a href="#三、绑定事件" class="headerlink" title="三、绑定事件"></a>三、绑定事件</h3><p>在【选项对象】中可以设置methods属性为vue的示例添加方法，这些方法我已直接被调用，也可以绑定为事件。绑定事件的方法如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;fun&quot;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;fun&quot;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../script/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">methods</span>:&#123;</span><br><span class="javascript">                <span class="hljs-function"><span class="hljs-title">fun</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    alert(<span class="hljs-string">&quot;hello world&quot;</span>)</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;).$mount(<span class="hljs-string">&quot;#app&quot;</span>)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用【v-on:事件类型】和【@事件类型】两种方式都可以为元素绑定事件，在实际开发中，通常使用简写。</p><p>methods属性中定义的方法内部，可以使用this获取到vue的示例，也就是说我们可以进一步通过this获取到data中的属性，而且可以通过赋值的方式改变data中的属性值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeTitle&quot;</span>&gt;</span>改变标题<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../script/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript">                <span class="hljs-attr">title</span>:<span class="hljs-string">&quot;hello world&quot;</span></span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">methods</span>:&#123;</span><br><span class="javascript">                <span class="hljs-function"><span class="hljs-title">changeTitle</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.title = <span class="hljs-string">&quot;hello Vue&quot;</span>;</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;).$mount(<span class="hljs-string">&quot;#app&quot;</span>)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在上面的例子中，我们实现了通过按钮的点击事件改变h1中的文本内容。</p><h4 id="事件修饰符详解"><a href="#事件修饰符详解" class="headerlink" title="事件修饰符详解"></a>事件修饰符详解</h4><ul><li>.prevent:阻止元素的默认行为</li><li>.stop:阻止事件冒泡</li><li>.once:只触发一次事件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 阻止元素默认行为 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> @<span class="hljs-attr">submit.prevent</span>=<span class="hljs-string">&quot;postData&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">//jquery：操作DOM</span></span><br><span class="javascript">    <span class="hljs-keyword">const</span> vue = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        <span class="hljs-attr">methods</span>:&#123;</span><br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">postData</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;提交数据&quot;</span>);</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;);</span><br><span class="javascript">    vue.$mount(<span class="hljs-string">&quot;#app&quot;</span>)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 阻止事件冒泡 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.once</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">const</span> vue = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        <span class="hljs-attr">methods</span>:&#123;</span><br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;提交数据&quot;</span>);</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;);</span><br><span class="javascript">    vue.$mount(<span class="hljs-string">&quot;#app&quot;</span>)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="四、Vue的Demo"><a href="#四、Vue的Demo" class="headerlink" title="四、Vue的Demo"></a>四、Vue的Demo</h4><p>计数器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br>    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;&gt;&lt;/script&gt;<br>    &lt;title&gt;计数器&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;div id=&quot;app&quot;&gt;<br>        &lt;button @click=&quot;minus&quot;&gt;-&lt;/button&gt;<br>        &lt;span&gt;&#123;&#123; number &#125;&#125;&lt;/span&gt;<br>        &lt;button @click=&quot;plus&quot;&gt;+&lt;/button&gt;<br>    &lt;/div&gt;<br><br>    &lt;script&gt;<br>        new Vue(&#123;<br>            el:&quot;#app&quot;,<br>            data:&#123;<br>                number:0<br>            &#125;,<br>            methods:&#123;<br>                minus()&#123;<br>                    this.number--;<br>                &#125;,<br>                plus()&#123;<br>                    this.number++;<br>                &#125;<br>            &#125;<br>        &#125;)<br>    &lt;/script&gt;<br>    <br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jQuery常用方法</title>
    <link href="/2022/01/15/jQuery%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <url>/2022/01/15/jQuery%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="jQuery常用方法"><a href="#jQuery常用方法" class="headerlink" title="jQuery常用方法"></a>jQuery常用方法</h1><h3 id="一、事件概述"><a href="#一、事件概述" class="headerlink" title="一、事件概述"></a>一、事件概述</h3><p><strong>事件的基本概念</strong></p><p>通过事件我们可以加强用户与浏览器的交互性，例如可以实现当用户点击某个元素的时候，对元素做一些操作，或是移动鼠标，对元素做一些操作。</p><p><strong>事件的分类</strong></p><p>事件主要可以分为以下几类：</p><ul><li>鼠标事件</li><li>键盘事件</li><li>文档事件</li><li>表单事件</li><li>触摸事件</li><li>自定义事件</li></ul><p>本章我们主要讲解鼠标事件。</p><h3 id="二、鼠标单击事件"><a href="#二、鼠标单击事件" class="headerlink" title="二、鼠标单击事件"></a>二、鼠标单击事件</h3><p>我们先来将最常用的鼠标单击事件click，jQuery的基本语法如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;selector&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">//事件触发执行的代码</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>我们先通过$(“selector”)选择器获取元素，然后通过click为元素定义事件，这样当我们用鼠标单击这个元素的时候，就会执行花括号中的代码。</p><p><strong>输出文字</strong></p><p>我们现在实现一个功能，当我们点击一个按钮的时候，在控制台输出”hello world”,代码如下所示。<a href="https://github.com/xiaozhoulee/xiaozhou-examples/blob/master/03-jQuery/%E7%AC%AC02%E8%8A%82%EF%BC%9A%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A/demo01.html">demo01.html</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">$(<span class="hljs-string">&quot;button&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;hello world&quot;</span>);</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>切换图片</strong></p><p>结合我们上一章的内容，来实现一个功能，当我们点击按钮的时候，将一张图片切换成另一张图片,代码如下所示。<a href="https://github.com/xiaozhoulee/xiaozhou-examples/blob/master/03-jQuery/%E7%AC%AC02%E8%8A%82%EF%BC%9A%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A/demo02.html">demo02.html</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/0302_img0.jpg&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">$(<span class="hljs-string">&quot;img&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">$(<span class="hljs-built_in">this</span>).attr(<span class="hljs-string">&quot;src&quot;</span>,<span class="hljs-string">&quot;images/0302_img1.jpg&quot;</span>)</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p> 在上面的代码中，$(this)对应的就是我们点击的这个元素，也就是img标签，当我们点击img标签的时候，使用attr方法将其src属性设置成另一张了图片的地址，这样就实现了图片的切换。</p><p><strong>获取索引</strong></p><p>接下来我们要实现一个更复杂的效果：点击一个数字列表来实现切换图片的功能，列表有三个数字，对应着三张不同的图片。</p><p>要实现这样的功能，很多同学会想到，给数字列表分别绑定事件，每一个事件都对应不同的图片就可以了，虽然这样可以实现我们要的功能，但是如果需求又增加了两张图片，那我们就又要多定义两个事件，所以这个方案是不合理的。</p><p>我们需要的是用一个选择器找到所有的数字列表，让后统一绑定一个事件，然后在点击数字列表的时候，让程序找到我们点击的是第几个，然后切换到对应的图片，就可以了。下面的代码可以让我们判断是第几个元素触发了事件,当点击时会输出对应的下角标。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        $(<span class="hljs-string">&quot;li&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> i = $(<span class="hljs-built_in">this</span>).index();</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(i);</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>在上面的代码中，index方法可以获取元素的索引，索引就是当前元素在其同级的元素中排第几个，从0开始计数。</li><li>我们将index获取到的索引值赋值给变量i，并输出i就看到了这个元素的索引。</li></ul><p><strong>切换图片</strong></p><p>找到了列表的索引，我们下一步就要实现图片切换的功能了，首先我们需要了解数组的概念，数组是一个集合，我们将3章图片的路径放到了数组中，这样我们就可以通过数组的下标来获取到数组的元素了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;images/0302_img0.jpg&quot;</span>,<span class="hljs-string">&quot;images/0302_img1.jpg&quot;</span>,<span class="hljs-string">&quot;images/0302_img2.jpg&quot;</span>];<br>arr[<span class="hljs-number">0</span>]  <span class="hljs-comment">//images/0302_img0.jpg</span><br>arr[<span class="hljs-number">1</span>]  <span class="hljs-comment">//images/0302_img1.jpg</span><br>arr[<span class="hljs-number">2</span>]  <span class="hljs-comment">//images/0302_img2.jpg</span><br></code></pre></td></tr></table></figure><p>上面的代码可以了解到，我们可以通过数组的下标来获取数组中的元素。</p><p>接下来，我们结合之前学过的方法来实现一个图片切换的效果,代码如下所示。<a href="https://github.com/xiaozhoulee/xiaozhou-examples/blob/master/03-jQuery/%E7%AC%AC02%E8%8A%82%EF%BC%9A%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A/demo03.html">demo03.html</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/0302_img0.jpg&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;images/0302_img0.jpg&quot;</span>,<span class="hljs-string">&quot;images/0302_img1.jpg&quot;</span>,<span class="hljs-string">&quot;images/0302_img2.jpg&quot;</span>];</span><br><span class="javascript">        $(<span class="hljs-string">&quot;li&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> i = $(<span class="hljs-built_in">this</span>).index();</span><br><span class="javascript">            <span class="hljs-keyword">var</span> url = arr[i];  <span class="hljs-comment">//获取图片的地址</span></span><br><span class="javascript">            $(<span class="hljs-string">&quot;img&quot;</span>).attr(<span class="hljs-string">&quot;src&quot;</span>,url);  <span class="hljs-comment">//将图片的src属性设置成数组中指定的图片地址</span></span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这样，当我们点击数字列表的时候，就可以实现图片切换的功能了。</p><h3 id="三、其他鼠标事件"><a href="#三、其他鼠标事件" class="headerlink" title="三、其他鼠标事件"></a>三、其他鼠标事件</h3><p><strong>鼠标移入移出改变样式</strong></p><p>鼠标的移入和一出事件分别是mouseenter和mouseleave。我们来实现一个功能，当我们的鼠标移入一个div的时候，让其变为红色，移出的时候，让其变为绿色，代码如下：<a href="https://github.com/xiaozhoulee/xiaozhou-examples/blob/master/03-jQuery/%E7%AC%AC02%E8%8A%82%EF%BC%9A%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A/demo04.html">demo04.html</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span>&#123;<br>        <span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;<br>        <span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span>;<br>        <span class="hljs-attribute">background-color</span>:red;<br>    &#125;<br>    <span class="hljs-selector-class">.bg</span>&#123;<br>        <span class="hljs-attribute">background-color</span>: green<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    $(<span class="hljs-string">&quot;.box&quot;</span>).mouseenter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        $(<span class="hljs-built_in">this</span>).addClass(<span class="hljs-string">&quot;bg&quot;</span>);</span><br><span class="javascript">    &#125;).mouseleave(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        $(<span class="hljs-built_in">this</span>).removeClass(<span class="hljs-string">&quot;bg&quot;</span>);</span><br><span class="javascript">    &#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br></code></pre></td></tr></table></figure><p>这里我们使用了链式操作，用一个选择器，绑定两个属性。</p><p>鼠标移入和移出事件可以简写成一个hover事件，上面的代码可以简写如下所示：<a href="https://github.com/xiaozhoulee/xiaozhou-examples/blob/master/03-jQuery/%E7%AC%AC02%E8%8A%82%EF%BC%9A%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A/demo05.html">demo05.html</a></p><p>hover有方法有两个参数，都是函数，分别对应着mouseenter和mouseleave的事件，这样写的效果与上面完全相同。</p><p><strong>鼠标移动获取坐标</strong></p><p>鼠标在元素上移动的时候也会触发事件，下面我们来实现一个功能，当鼠标移动到一个div的时候，获取鼠标在网页页面上的坐标,代码如下所示：<a href="https://github.com/xiaozhoulee/xiaozhou-examples/blob/master/03-jQuery/%E7%AC%AC02%E8%8A%82%EF%BC%9A%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A/demo06.html">demo06.html</a></p><ul><li>在上面的代码中e是事件对象，我们可以通过它获取到x轴和y轴的坐标。</li><li>然后通过console.log()方法在控制台输出x坐标和y坐标。</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电影</title>
    <link href="/2022/01/13/%E7%94%B5%E5%BD%B1/"/>
    <url>/2022/01/13/%E7%94%B5%E5%BD%B1/</url>
    
    <content type="html"><![CDATA[<h1 id="电影"><a href="#电影" class="headerlink" title="电影"></a>电影</h1><h2 id="战争"><a href="#战争" class="headerlink" title="战争"></a>战争</h2><h3 id="《1917》"><a href="#《1917》" class="headerlink" title="《1917》"></a>《1917》</h3><figure class="highlight markdown"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs markdown">&#123;% note info 和爱豆一起看的第一个，真好看，一镜到底太爽了 %&#125;<br></code></pre></td></tr></table></figure><h3 id="《血战钢锯岭》"><a href="#《血战钢锯岭》" class="headerlink" title="《血战钢锯岭》"></a>《血战钢锯岭》</h3><h3 id="《决战中途岛》"><a href="#《决战中途岛》" class="headerlink" title="《决战中途岛》"></a>《决战中途岛》</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% note success  画面挺震撼的，但沉浸感好像不强 %&#125;<br></code></pre></td></tr></table></figure><h3 id="《拯救大兵瑞恩》"><a href="#《拯救大兵瑞恩》" class="headerlink" title="《拯救大兵瑞恩》"></a>《拯救大兵瑞恩》</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% note success  经典老片了，很好看 %&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="《沉默的羔羊》"><a href="#《沉默的羔羊》" class="headerlink" title="《沉默的羔羊》"></a>《沉默的羔羊》</h3><h3 id="《绿皮书》"><a href="#《绿皮书》" class="headerlink" title="《绿皮书》"></a>《绿皮书》</h3><h3 id="《怦然心动》"><a href="#《怦然心动》" class="headerlink" title="《怦然心动》"></a>《怦然心动》</h3><hr><h2 id="国产"><a href="#国产" class="headerlink" title="国产"></a>国产</h2><h3 id="《活着》"><a href="#《活着》" class="headerlink" title="《活着》"></a>《活着》</h3><h3 id="《霸王别姬》"><a href="#《霸王别姬》" class="headerlink" title="《霸王别姬》"></a>《霸王别姬》</h3><h3 id="《芳华》"><a href="#《芳华》" class="headerlink" title="《芳华》"></a>《芳华》</h3><h3 id="《我不是药神》"><a href="#《我不是药神》" class="headerlink" title="《我不是药神》"></a>《我不是药神》</h3>]]></content>
    
    
    <categories>
      
      <category>娱乐</category>
      
    </categories>
    
    
    <tags>
      
      <tag>电影</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>npm常用命令</title>
    <link href="/2022/01/13/npm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/01/13/npm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="npm常用命令"><a href="#npm常用命令" class="headerlink" title="npm常用命令"></a>npm常用命令</h1><h3 id="一、npm安装第三方模块"><a href="#一、npm安装第三方模块" class="headerlink" title="一、npm安装第三方模块"></a>一、npm安装第三方模块</h3><p>npm有两种方式安装第三方模块：本地安装和全局安装，使用哪种安装方式，取决于我们用npm模块来做什么。</p><ul><li>如果模块作为项目的依赖，需要被引入到指定项目当中，需要本地安装。</li><li>如果需要模块提供某些命令工具，则需要全局安装。</li></ul><p>稍后我们就来样式两种安装的区别。</p><h4 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装"></a>本地安装</h4><p>我们先打开windows命令行工具，进入到需要安装第三方模块的目录，例如D:/npmtest目录，然后执行下面命令</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">npm install query<br></code></pre></td></tr></table></figure><p>安装完成之后，npm会在D:/npmtest目录下创建一个node_modules的目录，然后将npm模块下载到这个目录之下。上面的例子我们安装的是jQuery，所以打开node_modules会看到一个jQuery的目录。</p><p>关于第三方模块如何在node项目中使用，我们下一节会讲解。</p><h4 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h4><p>某些第三方模块为我们提供了一些功能需要全局安装才可以使用，例如<code>http-server</code>，他可以为我们提供一个创建静态文件服务器的功能。</p><p>现在我们就来下载这个模块，全局安装需要在命令中添加-g，示例代码如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g http-server<br></code></pre></td></tr></table></figure><p>下载完成之后，http-server模块不会像本地安装那样下载到当前目录下，而是会下载到系统目录中，win10系统下载目录如下所示：</p><blockquote><p>C:\Users\Administrator\AppData\Roaming\npm\node_modules</p></blockquote><p>我们不必去打开这个目录去浏览下载的文件，只要知道全局安装之后，我们可以使用这个模块提供的精灵。</p><p>http-server模块提供了http-server命令，可以用此命令创建一个静态服务器，步骤如下：</p><ol><li>选择开启服务器的目录，这里选择D:/test/server目录。</li><li>在这个目录中执行http-server命令，默认端口为8080。</li><li>在server目录中创建一个index.html文件。</li><li>打开浏览器，访问<a href="http://127.0.0.1:8080/index.html%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0index.html%E6%96%87%E4%BB%B6%E7%9A%84%E5%86%85%E5%AE%B9%E3%80%82">http://127.0.0.1:8080/index.html，可以看到index.html文件的内容。</a></li><li>如果服务器与其他设备处于同一网络（例如同一wify下的手机和电脑），可以使用ip地址访问此网页。</li></ol><p>大家可能对服务器的概念不是特别了解，关于服务器的概念，我们会在后续章节。</p><h3 id="二、npm项目初始化"><a href="#二、npm项目初始化" class="headerlink" title="二、npm项目初始化"></a>二、npm项目初始化</h3><p>使用如下命令，可以在当前目录编程一个node项目（实质上就是添加了一个package.json文件）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm init<br></code></pre></td></tr></table></figure><p>执行命令之后会有一些列提示，一直按回车选择默认项即可。创建完成之后会生成一个package.json文件，文件内容如下所示：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;test&quot;</span>,<br>  <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;1.0.0&quot;</span>,<br>  <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-attr">&quot;main&quot;</span>: <span class="hljs-string">&quot;index.js&quot;</span>,<br>  <span class="hljs-attr">&quot;dependencies&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;vue&quot;</span>: <span class="hljs-string">&quot;^2.6.10&quot;</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;devDependencies&quot;</span>: &#123;&#125;,<br>  <span class="hljs-attr">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;test&quot;</span>: <span class="hljs-string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;author&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-attr">&quot;license&quot;</span>: <span class="hljs-string">&quot;ISC&quot;</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>这个文件用来记录项目的详细信息，包括项目名称、依赖模块等。</p><h4 id="安装第三方依赖"><a href="#安装第三方依赖" class="headerlink" title="安装第三方依赖"></a>安装第三方依赖</h4><p>通过下列命令，可以将安装的第三方依赖记录在package.json文件中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save jquery<br>npm install --save bootstrap<br></code></pre></td></tr></table></figure><p>下载完成之后，可以看到在dependencies字段下面记录了我们下载模块的名称和版本。这样，只要有了这个文件，我们就知道整个node项目需要依赖哪些第三方模块了。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;test&quot;</span>,<br>  <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;1.0.0&quot;</span>,<br>  <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-attr">&quot;main&quot;</span>: <span class="hljs-string">&quot;index.js&quot;</span>,<br>  <span class="hljs-attr">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;test&quot;</span>: <span class="hljs-string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;author&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-attr">&quot;license&quot;</span>: <span class="hljs-string">&quot;ISC&quot;</span>,<br>  <span class="hljs-attr">&quot;dependencies&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;bootstrap&quot;</span>: <span class="hljs-string">&quot;^4.4.1&quot;</span>,<br>    <span class="hljs-attr">&quot;jquery&quot;</span>: <span class="hljs-string">&quot;^3.4.1&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>下载多个模块可以简写：npm install –save jquery boostrap，模块名之间用空格分开。</p></blockquote><h3 id="三、通过配置文件安装依赖"><a href="#三、通过配置文件安装依赖" class="headerlink" title="三、通过配置文件安装依赖"></a>三、通过配置文件安装依赖</h3><p>在实际开发的过程中，项目代码可能会分享给他人或传输到互联网上，我们没有必要将依赖模块的代码一并传输，只需要传输一个package.json文件即可。</p><p>有了这个配置文件，其他人接收到项目代码之后，只需要执行下面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install<br></code></pre></td></tr></table></figure><p>npm便会根据package.json文件中的记录下载所有依赖模块。</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网页重构</title>
    <link href="/2022/01/13/%E7%BD%91%E9%A1%B5%E9%87%8D%E6%9E%84/"/>
    <url>/2022/01/13/%E7%BD%91%E9%A1%B5%E9%87%8D%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="网页重构"><a href="#网页重构" class="headerlink" title="网页重构"></a>网页重构</h1><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><h3 id="输入框"><a href="#输入框" class="headerlink" title="输入框"></a>输入框</h3><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Placeholder ：用于显示输入框中的提示信息</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="下拉框"><a href="#下拉框" class="headerlink" title="下拉框"></a>下拉框</h3><h3 id="单选框"><a href="#单选框" class="headerlink" title="单选框"></a>单选框</h3><h3 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h3><h3 id="HTML元素的分类"><a href="#HTML元素的分类" class="headerlink" title="HTML元素的分类"></a>HTML元素的分类</h3><h4 id="块元素：宽高可以设置，独立成行-h1-h6-p-div-ul-li"><a href="#块元素：宽高可以设置，独立成行-h1-h6-p-div-ul-li" class="headerlink" title="块元素：宽高可以设置，独立成行 h1-h6,p,div,ul,li"></a>块元素：宽高可以设置，独立成行 h1-h6,p,div,ul,li</h4><h4 id="行内元素：宽高不可以设置，不独立成行-a-span"><a href="#行内元素：宽高不可以设置，不独立成行-a-span" class="headerlink" title="行内元素：宽高不可以设置，不独立成行 a,span"></a>行内元素：宽高不可以设置，不独立成行 a,span</h4><h4 id="行内块元素：宽高可以设置，不独立成行-img-input-button"><a href="#行内块元素：宽高可以设置，不独立成行-img-input-button" class="headerlink" title="行内块元素：宽高可以设置，不独立成行 img,input,button"></a>行内块元素：宽高可以设置，不独立成行 img,input,button</h4><h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><p>只要在想清楚浮动的容器上，再加一个名为clear的class即可</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*  把before和after转换为块元素，并且块元素的内容content是空的 */</span><br>        <span class="hljs-selector-class">.clear</span><span class="hljs-selector-pseudo">::before</span>,<span class="hljs-selector-class">.clear</span><span class="hljs-selector-pseudo">::after</span>&#123;<br>            <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-attribute">display</span>: block;<br>            <span class="hljs-attribute">clear</span>: both;<br>        &#125;<br></code></pre></td></tr></table></figure><h3 id="子绝父相"><a href="#子绝父相" class="headerlink" title="子绝父相"></a>子绝父相</h3><p>子元素以父元素为参照物，随着网页大小改变，父子元素相对位置不变</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.pic-box</span>&#123;<br>            <span class="hljs-attribute">width</span>: <span class="hljs-number">628px</span>;<br>            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>            <span class="hljs-attribute">position</span>: relative;<br>        &#125;<br>        <span class="hljs-selector-class">.list</span>&#123;<br>            <span class="hljs-attribute">position</span>: absolute;<br>            <span class="hljs-attribute">left</span>: <span class="hljs-number">100px</span>;<br>            <span class="hljs-attribute">top</span>: <span class="hljs-number">200px</span>;<br>        &#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pic-box&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/success.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="border在盒子内部显示"><a href="#border在盒子内部显示" class="headerlink" title="border在盒子内部显示"></a>border在盒子内部显示</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid blue;<br><span class="hljs-attribute">box-sizing</span>: border-box;<br></code></pre></td></tr></table></figure><p>​    box-sizing: border-box;    边框在盒子模型内部显示，不会挤跑外面的</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的第一篇博客文章</title>
    <link href="/2022/01/10/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
    <url>/2022/01/10/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p>内容</p><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p>内容</p><hr>]]></content>
    
    
    <categories>
      
      <category>随笔杂记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/01/09/hello-world/"/>
    <url>/2022/01/09/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><hr><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><h4 id="切换为root用户"><a href="#切换为root用户" class="headerlink" title="切换为root用户"></a>切换为root用户</h4><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">sudo su<br></code></pre></td></tr></table></figure><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><h4 id="进入blog所在目录"><a href="#进入blog所在目录" class="headerlink" title="进入blog所在目录"></a>进入blog所在目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> blog<br></code></pre></td></tr></table></figure><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><hr>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>axios</title>
    <link href="/2022/01/03/axios/"/>
    <url>/2022/01/03/axios/</url>
    
    <content type="html"><![CDATA[<h1 id="Ajax第三方模块"><a href="#Ajax第三方模块" class="headerlink" title="Ajax第三方模块"></a>Ajax第三方模块</h1><h3 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h3><p>在实际项目开发中，我们并不需要自己去封装Ajax模块，已经有很多成熟的Ajax第三方模块了，直接使用即可。</p><p>本节就来说说一个常用的Ajax第三方模块-Axios。</p><h3 id="二、下载并引入Axios"><a href="#二、下载并引入Axios" class="headerlink" title="二、下载并引入Axios"></a>二、下载并引入Axios</h3><p>可以直接使用npm下载Axios，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">npm install axios<br></code></pre></td></tr></table></figure><p>因为我们要将Axios引入到前端的页面，所以需要将axios.js文件拷贝到静态文件目录。</p><blockquote><p>在node_modules目录中，找到axios&gt;dist&gt;axios.min.js文件，拷贝到public目录中即可。然后在模板中用script标签来引入此js文件。</p></blockquote><h3 id="三、后台程序"><a href="#三、后台程序" class="headerlink" title="三、后台程序"></a>三、后台程序</h3><p>关于后台程序，我们仍然使用水果列表增删改查接口，实例代码如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//数据</span><br><span class="hljs-keyword">let</span> dataList = [<span class="hljs-string">&quot;香蕉&quot;</span>,<span class="hljs-string">&quot;苹果&quot;</span>,<span class="hljs-string">&quot;鸭梨&quot;</span>];<br><br><span class="hljs-comment">//get查看</span><br>router.get(<span class="hljs-string">&quot;/fruits&quot;</span>, <span class="hljs-function"><span class="hljs-params">ctx</span> =&gt;</span> &#123;<br>    ctx.body = dataList;<br>&#125;)<br><span class="hljs-comment">//post添加</span><br>router.post(<span class="hljs-string">&quot;/fruits&quot;</span>, <span class="hljs-function"><span class="hljs-params">ctx</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> fruit = ctx.request.body.fruit;<br>    dataList.push(fruit);<br>    ctx.body = dataList;<br>&#125;)<br><br><span class="hljs-comment">//put修改</span><br>router.put(<span class="hljs-string">&quot;/fruits/:id&quot;</span>, <span class="hljs-function"><span class="hljs-params">ctx</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> id = ctx.params.id;<br>    <span class="hljs-keyword">let</span> fruit = ctx.request.body.fruit;<br>    dataList.splice(id,<span class="hljs-number">1</span>,fruit);<br>    ctx.body = dataList;<br>&#125;)<br><span class="hljs-comment">//delete删除</span><br>router.delete(<span class="hljs-string">&quot;/fruits/:id&quot;</span>, <span class="hljs-function"><span class="hljs-params">ctx</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> id = ctx.params.id;<br>    dataList.splice(id,<span class="hljs-number">1</span>);<br>    ctx.body = dataList;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="四、Axios的常用方法"><a href="#四、Axios的常用方法" class="headerlink" title="四、Axios的常用方法"></a>四、Axios的常用方法</h3><p>接下来，使用axios实现用户列表的增删改查。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//get请求查询数据</span><br>axios.get(<span class="hljs-string">&quot;/fruits&quot;</span>).then( <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(res.data)<br>&#125; )<br><span class="hljs-comment">//post请求添加数据</span><br>axios.post(<span class="hljs-string">&quot;/fruits&quot;</span>,&#123;<br>    <span class="hljs-attr">fruit</span>:<span class="hljs-string">&quot;草莓&quot;</span><br>&#125;).then( <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(res.data)<br>&#125; )<br><span class="hljs-comment">//put请求修改数据</span><br>axios.put(<span class="hljs-string">&quot;/fruits/0&quot;</span>,&#123;<br>    <span class="hljs-attr">fruit</span>:<span class="hljs-string">&quot;西瓜&quot;</span><br>&#125;).then( <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(res.data)<br>&#125; )<br><span class="hljs-comment">//delete请求删除数据</span><br>axios.delete(<span class="hljs-string">&quot;/fruits/0&quot;</span>).then( <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(res.data)<br>&#125; )<br><br></code></pre></td></tr></table></figure><p>通过上面的代码可以看到，使用Axios完成异步的数据操作是非常简单的，我们在后续章节的Ajax相关内容，都会使用Axios来实现。</p><h3 id="五、jQuery中的ajax方法"><a href="#五、jQuery中的ajax方法" class="headerlink" title="五、jQuery中的ajax方法"></a>五、jQuery中的ajax方法</h3><p>我们之前使用jQuery主要是用来操作DOM，其实jQuery也封装了Ajax方法，实例代码如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">$.ajax(&#123;<br>    <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;/fruit&quot;</span>,<br>    <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;get&quot;</span><br>&#125;).done( <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(res);<br>&#125;)<br></code></pre></td></tr></table></figure><p>如果项目是基于jQuery开发的，jQuery中的Ajax方法可以完全替代Axios，但是如果项目并没有使用jQuery，那么使用Axios这种轻量级的Ajax库会更方便。</p><h3 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h3><p>本节主要讲解的是Ajax的使用方法，在实际项目开发中，Axios需要结合表单和表格元素完成数据的操作，并在页面中展示出操作的结果。大多时候都与Vue框架一起，完成前端数据的获取与展示。</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
